   goto L1;
void cmpIgual(){
        t3=p+1;
        t4=stack[t3];
        t6=p+2;
        t5=stack[t6];
        stack[p]=0;
    L3:
        t7=heap[t4];
        t8=heap[t5];
        if(t7==557886) goto L9;
        goto L5;
    L9:
        if (t8==557886) goto L4;
        goto L5;
    L4:
        stack[p]=1;
        goto L8;
    L5:
        if (t7==557886) goto L6;
        if (t8==557886) goto L6;
        if (t7!=t8) goto L6;
        goto L7;
    L6:
        goto L8;
    L7:
        t4=t4+1;
        t5=t5+1;
        goto L3;
    L8:
}
void potencia(){
        t9=p+3;
        t10=p+1;
        t11=stack[t10];
        stack[t9]=t11;
        t12=p+4;
        t13=p+6;
        t14=t13+1;
        t15=p+2;
        t16=stack[t15];
        stack[t14]=t16;
        p=p+6;
        call getent();
        t17=p+0;
        t18=stack[t17];
        p=p-6;
        stack[t12]=t18;
        t19=p+5;
        t20=p+2;
        t21=stack[t20];
        t22=p+4;
        t23=stack[t22];
        t24=t21-t23;
        stack[t19]=t24;
        t25=p+4;
        t26=stack[t25];
        if (t26==0) goto L12;
        goto L13;
    L12:
        t27=p+3;
        stack[t27]=1;
        goto L11;
    L13:
        t28=p+6;
        stack[t28]=0;
    L14:
        t29=p+6;
        t30=stack[t29];
        t31=p+4;
        t32=stack[t31];
        t33=t32-1;
        if (t30<t33) goto L15;
        goto L16;
    L15:
        t34=p+3;
        t35=p+3;
        t36=stack[t35];
        t37=p+1;
        t38=stack[t37];
        t39=t36*t38;
        stack[t34]=t39;
        t40=p+6;
        t41=p+6;
        t42=stack[t41];
        t43=t42+1;
        stack[t40]=t43;
        goto L14;
    L16:
    L11:
        t44=p+6;
        stack[t44]=1;
        t45=p+7;
        stack[t45]=1;
        t46=p+5;
        t47=stack[t46];
        if (t47!=0) goto L18;
        goto L19;
    L18:
    L20:
        t48=p+5;
        t49=stack[t48];
        t50=t49%1;
        if (t50!=0) goto L21;
        goto L22;
    L21:
        t51=p+5;
        t52=p+5;
        t53=stack[t52];
        t54=t53*10;
        stack[t51]=t54;
        t55=p+6;
        t56=p+6;
        t57=stack[t56];
        t58=10*t57;
        stack[t55]=t58;
        goto L20;
    L22:
        t59=p+7;
        t60=p+9;
        t61=t60+1;
        t62=p+1;
        t63=stack[t62];
        stack[t61]=t63;
        t64=t60+2;
        t65=p+6;
        t66=stack[t65];
        t67=p+5;
        t68=stack[t67];
        t69=t66/t68;
        stack[t64]=t69;
        p=p+9;
        call raizsqrt();
        t70=p+0;
        t71=stack[t70];
        p=p-9;
        stack[t59]=t71;
        goto L17;
    L19:
    L17:
        t72=p+3;
        t73=p+3;
        t74=stack[t73];
        t75=p+7;
        t76=stack[t75];
        t77=t74*t76;
        stack[t72]=t77;
        t78=p+0;
        t79=p+3;
        t80=stack[t79];
        stack[t78]=t80;
}
void raizsqrt(){
        t81=p+3;
        stack[t81]=0;
        t82=p+4;
        stack[t82]=0.00001;
        t83=p+2;
        t84=stack[t83];
        if (t84==0) goto L24;
        goto L25;
    L24:
        t85=p+3;
        stack[t85]=1;
        goto L23;
    L25:
    L26:
        t86=p+6;
        t87=t86+1;
        t88=p+3;
        t89=stack[t88];
        stack[t87]=t89;
        t90=t86+2;
        t91=p+2;
        t92=stack[t91];
        stack[t90]=t92;
        p=p+6;
        call potene();
        t93=p+0;
        t94=stack[t93];
        p=p-6;
        t95=p+1;
        t96=stack[t95];
        if(t94<t96) goto L27;
        goto L28;
    L27:
        t97=p+3;
        t98=p+3;
        t99=stack[t98];
        t100=p+4;
        t101=stack[t100];
        t102=t99+t101;
        stack[t97]=t102;
        goto L26;
    L28:
    L23:
        t103=p+0;
        t104=p+3;
        t105=stack[t104];
        stack[t103]=t105;
}
void potene(){
        t106=p+3;
        stack[t106]=1;
        t107=p+4;
        stack[t107]=0;
    L29:
        t108=p+4;
        t109=stack[t108];
        t110=p+2;
        t111=stack[t110];
        if (t109<t111) goto L30;
        goto L31;
    L30:
        t112=p+3;
        t113=p+3;
        t114=stack[t113];
        t115=p+1;
        t116=stack[t115];
        t117=t114*t116;
        stack[t112]=t117;
        t118=p+4;
        t119=p+4;
        t120=stack[t119];
        t121=t120+1;
        stack[t118]=t121;
        goto L29;
    L31:
        t122=p+0;
        t123=p+3;
        t124=stack[t123];
        stack[t122]=t124;
}
void print_olcp2jjps(){
        t125=p+1;
        t126=stack[t125];
    L32:
        t127=heap[t126];
        if(t127==557886) goto L33;
        print("%c",t127);
        t126=t126+1;
        goto L32;
    L33:
}
void copia_olcp2jjps(){
        t128=p+1;
        t129=stack[t128];
    L34:
        t130=heap[t129];
        if(t130==557886) goto L35;
        heap[h]=t130;
        h=h+1;
        t129=t129+1;
        goto L34;
    L35:
}
void concat_olcp2jjps(){
        stack[p]=h;
        t131=p+3;
        t132=t131+1;
        t133=p+1;
        t134=stack[t133];
        stack[t132]=t134;
        p=p+3;
        call copia_olcp2jjps();
        p=p-3;
        t135=p+2;
        t136=stack[t135];
        stack[t132]=t136;
        p=p+3;
        call copia_olcp2jjps();
        p=p-3;
        heap[h]=557886;
        h=h+1;
}
void reverse(){
        t137=p+1;
        t138=stack[t137];
        t139=0;
        t140=0;
        t141=p+2;
        t142=stack[t141];
        t143=t142-1;
    L36:
        if(t140<t143) goto L37;
        goto L38;
    L37:
        t144=t138+t140;
        t139=heap[t144];
        t145=t138+t143;
        t146=heap[t145];
        heap[t144]=t146;
        heap[t145]=t139;
        t140=t140+1;
        t143=t143-1;
        goto L36;
    L38:
}
void ftoa(){
        t147=p+3;
        stack[t147]=h;
        t148=p+1;
        t149=stack[t148];
        if(t149<0) goto L40;
        goto L41;
    L40:
        heap[h]=45;
        h=h+1;
        t150=p+1;
        t151=p+1;
        t152=stack[t151];
        t153=-1;
        t154=t152*t153;
        stack[t150]=t154;
        goto L39;
    L41:
    L39:
        t155=p+4;
        t156=p+4;
        t157=t156+1;
        t158=p+1;
        t159=stack[t158];
        stack[t157]=t159;
        p=p+4;
        call getent();
        t160=p+0;
        t161=stack[t160];
        p=p-4;
        $$_clean_scope(t156, 4);
        stack[t155]=t161;
        t162=p+5;
        t163=p+1;
        t164=stack[t163];
        t165=p+4;
        t166=stack[t165];
        t167=t164-t166;
        stack[t162]=t167;
        t168=p+4;
        t169=stack[t168];
        if(t169==0) goto L43;
        goto L44;
    L43:
        heap[h]=48;
        h=h+1;
        goto L42;
    L44:
    L42:
        t170=p+6;
        t171=p+6;
        t172=t171+1;
        t173=p+4;
        t174=stack[t173];
        stack[t172]=t174;
        t175=t171+2;
        stack[t175]=0;
        p=p+6;
        call inttostr();
        t176=p+0;
        t177=stack[t176];
        p=p-6;
        $$_clean_scope(t171, 6);
        stack[t170]=t177;
        t178=p+2;
        t179=stack[t178];
        if (t179!=0) goto L46;
        goto L47;
    L46:
        heap[h]=46;
        h=h+1;
        t180=p+7;
        stack[t180]=0;
        t181=p+8;
        stack[t181]=1;
    L48:
        t182=p+7;
        t183=stack[t182];
        t184=p+2;
        t185=stack[t184];
        if(t183<t185) goto L49;
        goto L50;
    L49:
        t186=p+8;
        t187=p+8;
        t188=stack[t187];
        t189=t188*10;
        stack[t186]=t189;
        t190=p+7;
        t191=p+7;
        t192=stack[t191];
        t193=t192+1;
        stack[t190]=t193;
        goto L48;
    L50:
        t194=p+5;
        t195=p+5;
        t196=stack[t195];
        t197=p+8;
        t198=stack[t197];
        t199=t196*t198;
        stack[t194]=t199;
        t200=p+10;
        t201=t200+1;
        t202=p+10;
        t203=t202+1;
        t204=p+5;
        t205=stack[t204];
        stack[t203]=t205;
        p=p+10;
        call getent();
        t206=p+0;
        t207=stack[t206];
        p=p-10;
        $$_clean_scope(t202,10);
        stack[t201]=t207;
        t208=t200+2;
        t209=p+2;
        t210=stack[t209];
        stack[t208]=t210;
        p=p+10;
        call inttostr();
        t211=p+0;
        t212=stack[t211];
        p=p-10;
        goto L45;
    L47:
    L45:
        heap[h]=557886;
        h=h+1;
        t213=p+0;
        t214=p+3;
        t215=stack[t214];
        stack[t213]=t215;
}
void inttostr(){
        t216=p+3;
        stack[t216]=h;
        t217=p+4;
        stack[t217]=0;
    L51:
        t218=p+1;
        t219=stack[t218];
        if (t219!=0) goto L52;
        goto L53;
    L52:
        t220=p+4;
        t221=stack[t220];
        t222=t221+1;
        stack[t220]=t222;
        t223=p+1;
        t224=stack[t223];
        t225=t224%10;
        t226=t225+48;
        heap[h]=t226;
        h=h+1;
        t227=p+1;
        t228=stack[t227];
        t229=t228/10;
        stack[t227]=t229;
        t230=p+1;
        t231=p+5;
        t232=t231+1;
        t233=p+1;
        t234=stack[t233];
        stack[t232]=t234;
        p=p+5;
        call getent();
        t235=p+0;
        t236=stack[t235];
        p=p-5;
        $$_clean_scope(t231,5);
        stack[t230]=t236;
        goto L51;
    L53:
    L54:
        t237=p+4;
        t238=stack[t237];
        t239=p+2;
        t240=stack[t239];
        if(t238<t240) goto L55;
        goto L56;
    L55:
        heap[h]=48;
        h=h+1;
        t241=p+4;
        t242=stack[t241];
        t243=t242+1;
        stack[t241]=t243;
        goto L54;
    L56:
        t244=p+5;
        t245=t244+1;
        t246=p+3;
        t247=stack[t246];
        stack[t245]=t247;
        t248=t244+2;
        t249=p+4;
        t250=stack[t249];
        stack[t248]=t250;
        p=p+5;
        call reverse();
        p=p-5;
        $$_clean_scope(t244, 5);
        t251=p+0;
        t252=p+4;
        t253=stack[t252];
        stack[t251]=t253;
}
void getent(){
        t254=p+2;
        stack[t254]=0;
        t255=p+1;
        t256=stack[t255];
        if(t256<0) goto L58 ;
        goto L59;
    L58:
        t257=p+1;
        t258=p+1;
        t259=stack[t258];
        t260=t259-0.00000000001;
        stack[t257]=t260;
        t261=p+3;
        t262=p+1;
        t263=stack[t262];
        t264=0-1;
        t265=t263*t264;
        stack[t261]=t265;
    L60:
        t266=p+3;
        t267=stack[t266];
        if(t267<=1) goto L61;
        goto L62;
    L62:
        t268=p+3;
        t269=p+3;
        t270=stack[t269];
        t271=t270-1;
        stack[t268]=t271;
        t272=p+2;
        t273=p+2;
        t274=stack[t273];
        t275=t274+1;
        stack[t272]=t275;
        goto L60;
    L61:
        goto L57;
    L59:
        t276=p+1;
        t277=stack[t276];
        if (t277>0) goto L63;
        goto L64;
    L63:
        t278=p+1;
        t279=p+1;
        t280=stack[t279];
        t281=t280+0.00000000001;
        stack[t278]=t281;
        t282=p+4;
        t283=p+1;
        t284=stack[t283];
        stack[t282]=t284;
    L65:
        t285=p+4;
        t286=stack[t285];
        if(t286<=1) goto L66;
        goto L67;
    L67:
        t287=p+4;
        t288=p+4;
        t289=stack[t288];
        t290=t289-1;
        stack[t287]=t290;
        t291=p+2;
        t292=p+2;
        t293=stack[t292];
        t294=t293+1;
        stack[t291]=t294;
        goto L65;
    L66:
        goto L57;
    L64:
    L57:
        t295=p+0;
        t296=p+2;
        t297=stack[t296];
        stack[t295]=t297;
}
void booltostr(){
        t298=p+1;
        t299=stack[t298];
        stack[p]=h;
        if(t299==0)goto L68;
        heap[h]=116;
        h=h+1;
        heap[h]=114;
        h=h+1;
        heap[h]=117;
        h=h+1;
        heap[h]=101;
        h=h+1;
        heap[h]=557886;
        h=h+1;
        goto L69;
    L68:
        heap[h]=102;
        h=h+1;
        heap[h]=97;
        h=h+1;
        heap[h]=108;
        h=h+1;
        heap[h]=115;
        h=h+1;
        heap[h]=101;
        h=h+1;
        heap[h]=557886;
        h=h+1;
    L69:
}
void StringToNum(){
        t300=p+1;
        t301=stack[t300];
        t302=0;
        t303=0;
        t304=10;
        t305=1;
        t306=1;
    L70:
        t307=heap[t301];
        if (t307==557886) goto L76;
        if (t307!=45) goto L71;
        t305=-1;
        goto L75;
    L71:
        if(t307!=46) goto L72;
        t306=0;
        goto L75;
    L72:
        if(t307>=58) goto L77;
        if(t307>47) goto L73;
    L77:
        print("%c",99);
        print("%c",97);
        print("%c",115);
        print("%c",116);
        print("%c",32);
        print("%c",101);
        print("%c",114);
        print("%c",114);
        print("%c",111);
        print("%c",114);
        print("%c",32);
        t315=p+2;
        t316=stack[t315];
        t317=p+3;
        t318=stack[t317];
        print("%e",t316);
        print("%c",44);
        print("%e",t318);
        goto L2;
    L73:
        if(t306!=1) goto L74;
        t308=t302*10;
        t309=t308+t307;
        t310=t309-48;
        t302=t310;
        goto L75;
    L74:
        t311=t307-48;
        t312=t311/t304;
        t313=t303+t312;
        t303=t313;
        t304=t304*10;
    L75:
        t301=t301+1;
        goto L70;
    L76:
        t314=t302+t303;
        t302=t314*t305;
        stack[p]=t302;
}
void toLower(){
        stack[p]=h;
        t319=p+1;
        t320=stack[t319];
    L78:
        t321=heap[t320];
        if (t321==557886) goto L79;
        if (t321<=64) goto L80;
        if (t321>=92) goto L80;
        t321=t321+32;
        goto L81;
    L80:
    L81:
        heap[h]=t321;
        t320=t320+1;
        h=h+1;
        goto L78;
    L79:
        heap[h]=557886;
        h=h+1;
}
void toUpper(){
        stack[p]=h;
        t322=p+1;
        t323=stack[t322];
    L82:
        t324=heap[t323];
        if (t324==557886) goto L83;
        if (t324>96) goto L84;
        if (t324<123) goto L85;
        goto L85;
    L84:
        t324=t324-32;
        goto L86;
    L85:
    L86:
        heap[h]=t324;
        t323=t323+1;
        h=h+1;
        goto L82;
    L83:
        heap[h]=557886;
        h=h+1;
}
void stringSize(){
        t325=p+1;
        t326=stack[t325];
        t328=0;
    L87:
        t327=heap[t326];
        if (t327==557886) goto L88;
        t328=t328+1;
        t326=t326+1;
        goto L87;
    L88:
        stack[p]=t328;
}
void initArray(){
        stack[p]=h;
        t329=p+1;
        t330=stack[t329];
        t329=p+2;
        t332=stack[t329];
        t329=p+3;
        t333=stack[t329];
        t329=p+4;
        t334=stack[t329];
        t335=t332+t330;
        t336=heap[t335];
        heap[h]=t336;
        h=h+1;
        if(t333==1) goto L89;
        t337=h;
        t338=0;
    L90:
        if(t338>=t336) goto L91;
        h=h+1;
        t338=t338+1;
        goto L90;
    L91:
        t338=0;
    L92:
        if(t338>=t336) goto L93;
        t339=t330+1;
        t340=t333-1;
        t331=p+5;
        stack[t331]=t329;
        t331=p+6;
        stack[t331]=t330;
        t331=p+7;
        stack[t331]=t332;
        t331=p+8;
        stack[t331]=t333;
        t331=p+9;
        stack[t331]=t334;
        t331=p+10;
        stack[t331]=t335;
        t331=p+11;
        stack[t331]=t336;
        t331=p+12;
        stack[t331]=t337;
        t331=p+13;
        stack[t331]=t338;
        t331=p+14;
        stack[t331]=t339;
        t331=p+15;
        stack[t331]=t340;
        t341=p+16;
        t342=t341+1;
        stack[t342]=t339;
        t343=t341+2;
        stack[t343]=t332;
        t344=t341+3;
        stack[t344]=t340;
        t345=t341+4;
        stack[t345]=t334;
        p=p+ 16;
        call initArray();
        t346=stack[p];
        p=p- 16;
        t331=p+5;
        t329=stack[t331];
        t331=p+6;
        t330=stack[t331];
        t331=p+7;
        t332=stack[t331];
        t331=p+8;
        t333=stack[t331];
        t331=p+9;
        t334=stack[t331];
        t331=p+10;
        t335=stack[t331];
        t331=p+11;
        t336=stack[t331];
        t331=p+12;
        t337=stack[t331];
        t331=p+13;
        t338=stack[t331];
        t331=p+14;
        t339=stack[t331];
        t331=p+15;
        t340=stack[t331];
        t347=t337+t338;
        heap[t347]=t346;
        t338=t338+1;
        goto L92;
    L93:
        goto L96;
    L89:
        t348=0;
    L94:
        if(t348>=t336) goto L95;
        heap[h]=t334;
        h=h+1;
        t348=t348+1;
        goto L94;
    L95:
    L96:
}
void getSize(){
        t349=p+1;
        t350=stack[t349];
        t352=p+2;
        t353=stack[t352];
        if(t353!=1) goto L97;
        t354=heap[t350];
        stack[p]=t354;
        goto L100;
    L97:
        t355=0;
        t356=heap[t350];
        t357=0;
    L98:
        if(t357>=t356) goto L99;
        t358=t357+t350;
        t359=1+t358;
        t360=heap[t359];
        t361=t353-1;
        t351=p+3;
        stack[t351]=t349;
        t351=p+4;
        stack[t351]=t350;
        t351=p+5;
        stack[t351]=t352;
        t351=p+6;
        stack[t351]=t353;
        t351=p+7;
        stack[t351]=t354;
        t351=p+8;
        stack[t351]=t355;
        t351=p+9;
        stack[t351]=t356;
        t351=p+10;
        stack[t351]=t357;
        t351=p+11;
        stack[t351]=t358;
        t351=p+12;
        stack[t351]=t359;
        t351=p+13;
        stack[t351]=t360;
        t351=p+14;
        stack[t351]=t361;
        t362=p+15;
        t363=t362+1;
        stack[t363]=t360;
        t364=t362+2;
        stack[t364]=t361;
        p=p+15;
        call getSize();
        t365=stack[p];
        p=p-15;
        t351=p+3;
        t349=stack[t351];
        t351=p+4;
        t350=stack[t351];
        t351=p+5;
        t352=stack[t351];
        t351=p+6;
        t353=stack[t351];
        t351=p+7;
        t354=stack[t351];
        t351=p+8;
        t355=stack[t351];
        t351=p+9;
        t356=stack[t351];
        t351=p+10;
        t357=stack[t351];
        t351=p+11;
        t358=stack[t351];
        t351=p+12;
        t359=stack[t351];
        t351=p+13;
        t360=stack[t351];
        t351=p+14;
        t361=stack[t351];
        t366=t355+t365;
        t355=t366;
        t357=t357+1;
        goto L98;
    L99:
        stack[p]=t355;
    L100:
}
void getForEach(){
        t367=p+1;
        t368=stack[t367];
        t370=p+2;
        t371=stack[t370];
        if(t371==1) goto L101;
        t372=heap[t368];
        t373=0;
    L102:
        if(t373>=t372) goto L103;
        t374=t373+t368;
        t375=t374+1;
        t376=heap[t375];
        t377=t371-1;
        t369=p+3;
        stack[t369]=t367;
        t369=p+4;
        stack[t369]=t368;
        t369=p+5;
        stack[t369]=t370;
        t369=p+6;
        stack[t369]=t371;
        t369=p+7;
        stack[t369]=t372;
        t369=p+8;
        stack[t369]=t373;
        t369=p+9;
        stack[t369]=t374;
        t369=p+10;
        stack[t369]=t375;
        t369=p+11;
        stack[t369]=t376;
        t369=p+12;
        stack[t369]=t377;
        t378=p+13;
        t379=t378+1;
        stack[t379]=t376;
        t380=t378+2;
        stack[t380]=t377;
        p=p+13;
        call getForEach();
        p=p-13;
        t369=p+3;
        t367=stack[t369];
        t369=p+4;
        t368=stack[t369];
        t369=p+5;
        t370=stack[t369];
        t369=p+6;
        t371=stack[t369];
        t369=p+7;
        t372=stack[t369];
        t369=p+8;
        t373=stack[t369];
        t369=p+9;
        t374=stack[t369];
        t369=p+10;
        t375=stack[t369];
        t369=p+11;
        t376=stack[t369];
        t369=p+12;
        t377=stack[t369];
        t373=t373+1;
        goto L102;
    L103:
        goto L104;
    L101:
        t381=heap[t368];
        t382=0;
    L105:
        if(t382>=t381) goto L106;
        t383=t368+t382;
        t384=t383+1;
        t385=heap[t384];
        heap[h]=t385;
        h=h+1;
        t382=t382+1;
        goto L105;
    L106:
    L104:
}
void toCharArray(){
        stack[p]=h;
        t386=p+1;
        t387=stack[t386];
        t389=p+3;
        stack[t389]=t387;
        p=p+2;
        call stringSize();
        t388=stack[p];
        p=p-2;
        heap[h]=t388;
        h=h+1;
    L107:
        t390=heap[t387];
        if(t390==557886)goto L108;
        heap[h]=t390;
        h=h+1;
        t387=t387+1;
        goto L107;
    L108:
}
var p=0;
var h=0;
void miclas_def(){
       h=h+0;
/*########    DECLARACION GLOBAL    ########*/
       t392=stack[p];
       t391=t392+1;
       heap[t391]=555;
/*########    DECLARACION GLOBAL    ########*/
       t394=stack[p];
       t393=t394+2;
       t395=h;
       heap[h]=120;
       h=h+1;
       heap[h]=120;
       h=h+1;
       heap[h]=120;
       h=h+1;
       heap[h]=120;
       h=h+1;
       heap[h]=557886;
       h=h+1;
       heap[t393]=t395;
/*########    DECLARACION GLOBAL    ########*/
       t397=stack[p];
       t396=t397+3;
       heap[t396]=557886;
}
void otra_def(){
       h=h+0;
/*########    DECLARACION GLOBAL    ########*/
       t399=stack[p];
       t398=t399+1;
       heap[t398]=0;
/*########    DECLARACION GLOBAL    ########*/
       t401=stack[p];
       t400=t401+2;
       heap[t400]=557886;
/*########    DECLARACION GLOBAL    ########*/
       t403=stack[p];
       t402=t403+3;
       heap[t402]=557886;
}
void main(){
/*########    DECLARACION    ########*/
       t404=p+2;
       t405=h;
       heap[h]=112;
       h=h+1;
       heap[h]=97;
       h=h+1;
       heap[h]=109;
       h=h+1;
       heap[h]=76;
       h=h+1;
       heap[h]=65;
       h=h+1;
       heap[h]=83;
       h=h+1;
       heap[h]=32;
       h=h+1;
       heap[h]=112;
       h=h+1;
       heap[h]=97;
       h=h+1;
       heap[h]=108;
       h=h+1;
       heap[h]=97;
       h=h+1;
       heap[h]=99;
       h=h+1;
       heap[h]=73;
       h=h+1;
       heap[h]=79;
       h=h+1;
       heap[h]=83;
       h=h+1;
       heap[h]=557886;
       h=h+1;
       stack[t404]=t405;
/*########    DECLARACION    ########*/
       t406=p+3;
       t407=p+2;//ref
       t408=stack[t407];//valor
/*########    SENTENCIA LLAMADA    ########*/
       t409=p+4;
       stack[t409]=t404;//guardo temporal
       t409=p+5;
       stack[t409]=t405;//guardo temporal
       t409=p+6;
       stack[t409]=t406;//guardo temporal
       t409=p+7;
       stack[t409]=t407;//guardo temporal
       t409=p+8;
       stack[t409]=t408;//guardo temporal
       t410=p+9;//cambio simulado
       t411=t410+1;
       t1=9;
       t2=15;
       if(t408==557886) goto nullex;
       stack[t411]=t408;
       p=p+9;//cambio real
       call toCharArray();
//valor retorno
       t413=p+0;
       t414=stack[t413];
       p=p-9;//cambio real
       t409=p+4;
       t404=stack[t409];//saco temporal
       t409=p+5;
       t405=stack[t409];//saco temporal
       t409=p+6;
       t406=stack[t409];//saco temporal
       t409=p+7;
       t407=stack[t409];//saco temporal
       t409=p+8;
       t408=stack[t409];//saco temporal
       stack[t406]=t414;
/*########    SENTENCIA FOREACH    ########*/
       t415=p+3;//ref
       t416=stack[t415];//valor
       t422=p+7;
       t423=t422+1;
       stack[t423]=t416;
       t424=t422+2;
       stack[t424]=1;
       p=p+7;
       call  getSize();
       t418=stack[p];
       p=p-7;
       t417=h;
       t422=p+7;
       t423=t422+1;
       stack[t423]=t416;
       t424=t422+2;
       stack[t424]=1;
       p=p+7;
       call  getForEach();
       p=p-7;
       t425=0;
   L111: //etiqueta de inicio de ciclo
       if (t425>=t418) goto L110;
       t419=t425+t417;
       t420=heap[t419];
       t421=p+6;
       stack[t421]=t420;
//sentencias
/*########    SENTENCIA println    ########*/
       t426=p+6;//ref
       t427=stack[t426];//valor
       print("%c",t427);
       print("%c",10);
   L112:
       t425=t425+1;
       goto L111;
   L110:
   L109:
}
void miclas_int_String(){
/*########    acceso    ########*/
       t428=p+1;//posicion del this
       t429=stack[t428];//obtengo posicion del this
       t1=19;
       t2=7;
       if(t429==557886) goto nullex;
       t432=t429+1;//ref
       t434=heap[t432];//valor
/*########    valor    ########*/
       t435=p+2;//ref
       t436=stack[t435];//valor
/*########    asignacion    ########*/
       heap[t432]=t436;
/*########    acceso    ########*/
       t437=p+1;//posicion del this
       t438=stack[t437];//obtengo posicion del this
       t439=t438+2;//ref
       t440=heap[t439];//valor
/*########    valor    ########*/
       t441=p+3;//ref
       t442=stack[t441];//valor
/*########    asignacion    ########*/
       heap[t439]=t442;
   L113:
}
void a(){
/*########    sentencia return    ########*/
       t443=p+0;
       t444=p+1;//posicion del this
       t445=stack[t444];//obtengo posicion del this
       t446=t445+1;//ref
       t447=heap[t446];//valor
       t448=t447*5;
       stack[t443]=t448;
       goto L114;
   L114:
}
void otra_int_String(){
/*########    acceso    ########*/
       t449=p+1;//posicion del this
       t450=stack[t449];//obtengo posicion del this
       t1=36;
       t2=7;
       if(t450==557886) goto nullex;
       t453=t450+1;//ref
       t455=heap[t453];//valor
/*########    valor    ########*/
       t456=p+2;//ref
       t457=stack[t456];//valor
/*########    asignacion    ########*/
       heap[t453]=t457;
/*########    acceso    ########*/
       t458=p+1;//posicion del this
       t459=stack[t458];//obtengo posicion del this
       t1=37;
       t2=7;
       if(t459==557886) goto nullex;
       t462=t459+2;//ref
       t464=heap[t462];//valor
/*########    valor    ########*/
       t465=p+3;//ref
       t466=stack[t465];//valor
/*########    asignacion    ########*/
       heap[t462]=t466;
/*########    acceso    ########*/
       t467=p+1;//posicion del this
       t468=stack[t467];//obtengo posicion del this
       t1=38;
       t2=7;
       if(t468==557886) goto nullex;
       t471=t468+3;//ref
       t473=heap[t471];//valor
/*########    valor    ########*/
       t474=h;
       heap[t474]=t474;
       h=h+4;
       t475=p+4;//cambio simulado
       stack[t475]=t474;
       p=p+4;//cambio real
       call miclas_def();
       $$_clean_scope(t475,4);
       p=p-4;//cambio real
       t476=p+4;//cambio simulado
       t477=t476+1;
       stack[t477]=t474;
       t478=t476+2;
       stack[t478]=3696;
       t479=t476+3;
       t480=h;
       heap[h]=109;
       h=h+1;
       heap[h]=105;
       h=h+1;
       heap[h]=115;
       h=h+1;
       heap[h]=115;
       h=h+1;
       heap[h]=557886;
       h=h+1;
       stack[t479]=t480;
       p=p+4;//cambio real
       call miclas_int_String();
       $$_clean_scope(t476,4);
       p=p-4;//cambio real
/*########    asignacion    ########*/
       heap[t471]=t474;
   L115:
}
void funciona(){
/*########    SENTENCIA println    ########*/
       t481=p+1;//posicion del this
       t482=stack[t481];//obtengo posicion del this
       t483=t482+1;//ref
       t484=heap[t483];//valor
       t485=p+3;
       t486=t485+1;
       stack[t486]=t484;
       t487=t485+2;
       stack[t487]=0;
       p=p+3;
       call ftoa();
       t488=stack[p];
       p=p-3;
       t489=h;
       heap[h]=32;
       h=h+1;
       heap[h]=557886;
       h=h+1;
       if(t489!=557886) goto L117;
       t489=h;
       heap[h]=110;
       h=h+1;
       heap[h]=117;
       h=h+1;
       heap[h]=108;
       h=h+1;
       heap[h]=108;
       h=h+1;
       heap[h]=557886;
       h=h+1;
   L117:
       t490=p+3;
       t491=t490+1;
       stack[t491]=t488;//apuntador o1 heap
       t492=t490+2;
       stack[t492]=t489;//apuntador o2 heap
       p=p+3;
       call concat_olcp2jjps();
       t493=stack[p];
       p=p-3;
       if(t493!=557886) goto L118;
       t493=h;
       heap[h]=110;
       h=h+1;
       heap[h]=117;
       h=h+1;
       heap[h]=108;
       h=h+1;
       heap[h]=108;
       h=h+1;
       heap[h]=557886;
       h=h+1;
   L118:
       t494=p+1;//posicion del this
       t495=stack[t494];//obtengo posicion del this
       t496=t495+2;//ref
       t497=heap[t496];//valor
       if(t497!=557886) goto L119;
       t497=h;
       heap[h]=110;
       h=h+1;
       heap[h]=117;
       h=h+1;
       heap[h]=108;
       h=h+1;
       heap[h]=108;
       h=h+1;
       heap[h]=557886;
       h=h+1;
   L119:
       t498=p+3;
       t499=t498+1;
       stack[t499]=t493;//apuntador o1 heap
       t500=t498+2;
       stack[t500]=t497;//apuntador o2 heap
       p=p+3;
       call concat_olcp2jjps();
       t501=stack[p];
       p=p-3;
       if(t501==557886) goto L120;
       t502=p+3;
       t503=t502+1;
       stack[t503]=t501;
       p=p+3;
       call print_olcp2jjps();
       p=p-3;
       goto L121;
   L120:
       print("%c",110);
       print("%c",117);
       print("%c",108);
       print("%c",108);
   L121:
       print("%c",10);
/*########    SENTENCIA println    ########*/
       t504=p+1;//posicion del this
       t505=stack[t504];//obtengo posicion del this
       t1=43;
       t2=15;
       if(t505==557886) goto nullex;
       t508=t505+3;//ref
       t510=heap[t508];//valor
       t1=43;
       t2=17;
       if(t510==557886) goto nullex;
       t513=t510+2;//ref
       t515=heap[t513];//valor
       if(t515!=557886) goto L122;
       t515=h;
       heap[h]=110;
       h=h+1;
       heap[h]=117;
       h=h+1;
       heap[h]=108;
       h=h+1;
       heap[h]=108;
       h=h+1;
       heap[h]=557886;
       h=h+1;
   L122:
       t516=p+1;//posicion del this
       t517=stack[t516];//obtengo posicion del this
       t1=43;
       t2=25;
       if(t517==557886) goto nullex;
       t520=t517+3;//ref
       t522=heap[t520];//valor
       t1=43;
       t2=27;
       if(t522==557886) goto nullex;
       t525=t522+1;//ref
       t527=heap[t525];//valor
       t528=p+3;
       t529=t528+1;
       stack[t529]=t527;
       t530=t528+2;
       stack[t530]=0;
       p=p+3;
       call ftoa();
       t531=stack[p];
       p=p-3;
       t532=p+3;
       t533=t532+1;
       stack[t533]=t515;//apuntador o1 heap
       t534=t532+2;
       stack[t534]=t531;//apuntador o2 heap
       p=p+3;
       call concat_olcp2jjps();
       t535=stack[p];
       p=p-3;
       if(t535==557886) goto L123;
       t536=p+3;
       t537=t536+1;
       stack[t537]=t535;
       p=p+3;
       call print_olcp2jjps();
       p=p-3;
       goto L124;
   L123:
       print("%c",110);
       print("%c",117);
       print("%c",108);
       print("%c",108);
   L124:
       print("%c",10);
/*########    SENTENCIA println    ########*/
       t538=p+1;//posicion del this
       t539=stack[t538];//obtengo posicion del this
       t1=44;
       t2=15;
       if(t539==557886) goto nullex;
       t542=t539+3;//ref
       t544=heap[t542];//valor
       t1=44;
       t2=17;
       if(t544==557886) goto nullex;
       t547=t544+3;//ref
       t549=heap[t547];//valor
       t1=44;
       t2=17;
       if(t549==557886) goto nullex;
       t551=heap[t549];
       if (0>=t551) goto L2;
       t552=1+0;
       t553=t549+t552;
       t554=heap[t553];
       print("%e",t554);
       print("%c",10);
   L116:
}
       L1:
       call main();
       L2:
