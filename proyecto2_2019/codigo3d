void cmpIgual(){
        t1=p+1;
        t2=stack[t1];
        t4=p+2;
        t3=stack[t4];
        stack[p]=0;
    L2:
        t5=heap[t2];
        t6=heap[t3];
        if(t5==557886) goto L8;
        goto L4;
    L8:
        if (t6==557886) goto L3;
        goto L4;
    L3:
        stack[p]=1;
        goto L7;
    L4:
        if (t5==557886) goto L5;
        if (t6==557886) goto L5;
        if (t5!=t6) goto L5;
        goto L6;
    L5:
        goto L7;
    L6:
        t2=t2+1;
        t3=t3+1;
        goto L2;
    L7:
}
void potencia(){
        t7=p+3;
        t8=p+1;
        t9=stack[t8];
        stack[t7]=t9;
        t10=p+4;
        t11=p+6;
        t12=t11+1;
        t13=p+2;
        t14=stack[t13];
        stack[t12]=t14;
        p=p+6;
        call getent();
        t15=p+0;
        t16=stack[t15];
        p=p-6;
        stack[t10]=t16;
        t17=p+5;
        t18=p+2;
        t19=stack[t18];
        t20=p+4;
        t21=stack[t20];
        t22=t19-t21;
        stack[t17]=t22;
        t23=p+4;
        t24=stack[t23];
        if (t24==0) goto L11;
        goto L12;
    L11:
        t25=p+3;
        stack[t25]=1;
        goto L10;
    L12:
        t26=p+6;
        stack[t26]=0;
    L13:
        t27=p+6;
        t28=stack[t27];
        t29=p+4;
        t30=stack[t29];
        t31=t30-1;
        if (t28<t31) goto L14;
        goto L15;
    L14:
        t32=p+3;
        t33=p+3;
        t34=stack[t33];
        t35=p+1;
        t36=stack[t35];
        t37=t34*t36;
        stack[t32]=t37;
        t38=p+6;
        t39=p+6;
        t40=stack[t39];
        t41=t40+1;
        stack[t38]=t41;
        goto L13;
    L15:
    L10:
        t42=p+6;
        stack[t42]=1;
        t43=p+7;
        stack[t43]=1;
        t44=p+5;
        t45=stack[t44];
        if (t45!=0) goto L17;
        goto L18;
    L17:
    L19:
        t46=p+5;
        t47=stack[t46];
        t48=t47%1;
        if (t48!=0) goto L20;
        goto L21;
    L20:
        t49=p+5;
        t50=p+5;
        t51=stack[t50];
        t52=t51*10;
        stack[t49]=t52;
        t53=p+6;
        t54=p+6;
        t55=stack[t54];
        t56=10*t55;
        stack[t53]=t56;
        goto L19;
    L21:
        t57=p+7;
        t58=p+9;
        t59=t58+1;
        t60=p+1;
        t61=stack[t60];
        stack[t59]=t61;
        t62=t58+2;
        t63=p+6;
        t64=stack[t63];
        t65=p+5;
        t66=stack[t65];
        t67=t64/t66;
        stack[t62]=t67;
        p=p+9;
        call raizsqrt();
        t68=p+0;
        t69=stack[t68];
        p=p-9;
        stack[t57]=t69;
        goto L16;
    L18:
    L16:
        t70=p+3;
        t71=p+3;
        t72=stack[t71];
        t73=p+7;
        t74=stack[t73];
        t75=t72*t74;
        stack[t70]=t75;
        t76=p+0;
        t77=p+3;
        t78=stack[t77];
        stack[t76]=t78;
}
void raizsqrt(){
        t79=p+3;
        stack[t79]=0;
        t80=p+4;
        stack[t80]=0.00001;
        t81=p+2;
        t82=stack[t81];
        if (t82==0) goto L23;
        goto L24;
    L23:
        t83=p+3;
        stack[t83]=1;
        goto L22;
    L24:
    L25:
        t84=p+6;
        t85=t84+1;
        t86=p+3;
        t87=stack[t86];
        stack[t85]=t87;
        t88=t84+2;
        t89=p+2;
        t90=stack[t89];
        stack[t88]=t90;
        p=p+6;
        call potene();
        t91=p+0;
        t92=stack[t91];
        p=p-6;
        t93=p+1;
        t94=stack[t93];
        if(t92<t94) goto L26;
        goto L27;
    L26:
        t95=p+3;
        t96=p+3;
        t97=stack[t96];
        t98=p+4;
        t99=stack[t98];
        t100=t97+t99;
        stack[t95]=t100;
        goto L25;
    L27:
    L22:
        t101=p+0;
        t102=p+3;
        t103=stack[t102];
        stack[t101]=t103;
}
void potene(){
        t104=p+3;
        stack[t104]=1;
        t105=p+4;
        stack[t105]=0;
    L28:
        t106=p+4;
        t107=stack[t106];
        t108=p+2;
        t109=stack[t108];
        if (t107<t109) goto L29;
        goto L30;
    L29:
        t110=p+3;
        t111=p+3;
        t112=stack[t111];
        t113=p+1;
        t114=stack[t113];
        t115=t112*t114;
        stack[t110]=t115;
        t116=p+4;
        t117=p+4;
        t118=stack[t117];
        t119=t118+1;
        stack[t116]=t119;
        goto L28;
    L30:
        t120=p+0;
        t121=p+3;
        t122=stack[t121];
        stack[t120]=t122;
}
void print_olcp2jjps(){
        t123=p+1;
        t124=stack[t123];
    L31:
        t125=heap[t124];
        if(t125==557886) goto L32;
        print("%c",t125);
        t124=t124+1;
        goto L31;
    L32:
}
void copia_olcp2jjps(){
        t126=p+1;
        t127=stack[t126];
    L33:
        t128=heap[t127];
        if(t128==557886) goto L34;
        heap[h]=t128;
        h=h+1;
        t127=t127+1;
        goto L33;
    L34:
}
void concat_olcp2jjps(){
        stack[p]=h;
        t129=p+3;
        t130=t129+1;
        t131=p+1;
        t132=stack[t131];
        stack[t130]=t132;
        p=p+3;
        call copia_olcp2jjps();
        p=p-3;
        t133=p+2;
        t134=stack[t133];
        stack[t130]=t134;
        p=p+3;
        call copia_olcp2jjps();
        p=p-3;
        heap[h]=557886;
        h=h+1;
}
void reverse(){
        t135=p+1;
        t136=stack[t135];
        t137=0;
        t138=0;
        t139=p+2;
        t140=stack[t139];
        t141=t140-1;
    L35:
        if(t138<t141) goto L36;
        goto L37;
    L36:
        t142=t136+t138;
        t137=heap[t142];
        t143=t136+t141;
        t144=heap[t143];
        heap[t142]=t144;
        heap[t143]=t137;
        t138=t138+1;
        t141=t141-1;
        goto L35;
    L37:
}
void ftoa(){
        t145=p+3;
        stack[t145]=h;
        t146=p+1;
        t147=stack[t146];
        if(t147<0) goto L39;
        goto L40;
    L39:
        heap[h]=45;
        h=h+1;
        t148=p+1;
        t149=p+1;
        t150=stack[t149];
        t151=-1;
        t152=t150*t151;
        stack[t148]=t152;
        goto L38;
    L40:
    L38:
        t153=p+4;
        t154=p+4;
        t155=t154+1;
        t156=p+1;
        t157=stack[t156];
        stack[t155]=t157;
        p=p+4;
        call getent();
        t158=p+0;
        t159=stack[t158];
        p=p-4;
        $$_clean_scope(t154, 4);
        stack[t153]=t159;
        t160=p+5;
        t161=p+1;
        t162=stack[t161];
        t163=p+4;
        t164=stack[t163];
        t165=t162-t164;
        stack[t160]=t165;
        t166=p+4;
        t167=stack[t166];
        if(t167==0) goto L42;
        goto L43;
    L42:
        heap[h]=48;
        h=h+1;
        goto L41;
    L43:
    L41:
        t168=p+6;
        t169=p+6;
        t170=t169+1;
        t171=p+4;
        t172=stack[t171];
        stack[t170]=t172;
        t173=t169+2;
        stack[t173]=0;
        p=p+6;
        call inttostr();
        t174=p+0;
        t175=stack[t174];
        p=p-6;
        $$_clean_scope(t169, 6);
        stack[t168]=t175;
        t176=p+2;
        t177=stack[t176];
        if (t177!=0) goto L45;
        goto L46;
    L45:
        heap[h]=46;
        h=h+1;
        t178=p+7;
        stack[t178]=0;
        t179=p+8;
        stack[t179]=1;
    L47:
        t180=p+7;
        t181=stack[t180];
        t182=p+2;
        t183=stack[t182];
        if(t181<t183) goto L48;
        goto L49;
    L48:
        t184=p+8;
        t185=p+8;
        t186=stack[t185];
        t187=t186*10;
        stack[t184]=t187;
        t188=p+7;
        t189=p+7;
        t190=stack[t189];
        t191=t190+1;
        stack[t188]=t191;
        goto L47;
    L49:
        t192=p+5;
        t193=p+5;
        t194=stack[t193];
        t195=p+8;
        t196=stack[t195];
        t197=t194*t196;
        stack[t192]=t197;
        t198=p+10;
        t199=t198+1;
        t200=p+10;
        t201=t200+1;
        t202=p+5;
        t203=stack[t202];
        stack[t201]=t203;
        p=p+10;
        call getent();
        t204=p+0;
        t205=stack[t204];
        p=p-10;
        $$_clean_scope(t200,10);
        stack[t199]=t205;
        t206=t198+2;
        t207=p+2;
        t208=stack[t207];
        stack[t206]=t208;
        p=p+10;
        call inttostr();
        t209=p+0;
        t210=stack[t209];
        p=p-10;
        goto L44;
    L46:
    L44:
        heap[h]=557886;
        h=h+1;
        t211=p+0;
        t212=p+3;
        t213=stack[t212];
        stack[t211]=t213;
}
void inttostr(){
        t214=p+3;
        stack[t214]=h;
        t215=p+4;
        stack[t215]=0;
    L50:
        t216=p+1;
        t217=stack[t216];
        if (t217!=0) goto L51;
        goto L52;
    L51:
        t218=p+4;
        t219=stack[t218];
        t220=t219+1;
        stack[t218]=t220;
        t221=p+1;
        t222=stack[t221];
        t223=t222%10;
        t224=t223+48;
        heap[h]=t224;
        h=h+1;
        t225=p+1;
        t226=stack[t225];
        t227=t226/10;
        stack[t225]=t227;
        t228=p+1;
        t229=p+5;
        t230=t229+1;
        t231=p+1;
        t232=stack[t231];
        stack[t230]=t232;
        p=p+5;
        call getent();
        t233=p+0;
        t234=stack[t233];
        p=p-5;
        $$_clean_scope(t229,5);
        stack[t228]=t234;
        goto L50;
    L52:
    L53:
        t235=p+4;
        t236=stack[t235];
        t237=p+2;
        t238=stack[t237];
        if(t236<t238) goto L54;
        goto L55;
    L54:
        heap[h]=48;
        h=h+1;
        t239=p+4;
        t240=stack[t239];
        t241=t240+1;
        stack[t239]=t241;
        goto L53;
    L55:
        t242=p+5;
        t243=t242+1;
        t244=p+3;
        t245=stack[t244];
        stack[t243]=t245;
        t246=t242+2;
        t247=p+4;
        t248=stack[t247];
        stack[t246]=t248;
        p=p+5;
        call reverse();
        p=p-5;
        $$_clean_scope(t242, 5);
        t249=p+0;
        t250=p+4;
        t251=stack[t250];
        stack[t249]=t251;
}
void getent(){
        t252=p+2;
        stack[t252]=0;
        t253=p+1;
        t254=stack[t253];
        if(t254<0) goto L57 ;
        goto L58;
    L57:
        t255=p+1;
        t256=p+1;
        t257=stack[t256];
        t258=t257-0.00000000001;
        stack[t255]=t258;
        t259=p+3;
        t260=p+1;
        t261=stack[t260];
        t262=0-1;
        t263=t261*t262;
        stack[t259]=t263;
    L59:
        t264=p+3;
        t265=stack[t264];
        if(t265<=1) goto L60;
        goto L61;
    L61:
        t266=p+3;
        t267=p+3;
        t268=stack[t267];
        t269=t268-1;
        stack[t266]=t269;
        t270=p+2;
        t271=p+2;
        t272=stack[t271];
        t273=t272+1;
        stack[t270]=t273;
        goto L59;
    L60:
        goto L56;
    L58:
        t274=p+1;
        t275=stack[t274];
        if (t275>0) goto L62;
        goto L63;
    L62:
        t276=p+1;
        t277=p+1;
        t278=stack[t277];
        t279=t278+0.00000000001;
        stack[t276]=t279;
        t280=p+4;
        t281=p+1;
        t282=stack[t281];
        stack[t280]=t282;
    L64:
        t283=p+4;
        t284=stack[t283];
        if(t284<=1) goto L65;
        goto L66;
    L66:
        t285=p+4;
        t286=p+4;
        t287=stack[t286];
        t288=t287-1;
        stack[t285]=t288;
        t289=p+2;
        t290=p+2;
        t291=stack[t290];
        t292=t291+1;
        stack[t289]=t292;
        goto L64;
    L65:
        goto L56;
    L63:
    L56:
        t293=p+0;
        t294=p+2;
        t295=stack[t294];
        stack[t293]=t295;
}
void booltostr(){
        t296=p+1;
        t297=stack[t296];
        stack[p]=h;
        if(t297==0)goto L67;
        heap[h]=116;
        h=h+1;
        heap[h]=114;
        h=h+1;
        heap[h]=117;
        h=h+1;
        heap[h]=101;
        h=h+1;
        heap[h]=557886;
        h=h+1;
        goto L68;
    L67:
        heap[h]=102;
        h=h+1;
        heap[h]=97;
        h=h+1;
        heap[h]=108;
        h=h+1;
        heap[h]=115;
        h=h+1;
        heap[h]=101;
        h=h+1;
        heap[h]=557886;
        h=h+1;
    L68:
}
void StringToNum(){
        t298=p+1;
        t299=stack[t298];
        t300=0;
        t301=0;
        t302=10;
        t303=1;
        t304=1;
    L69:
        t305=heap[t299];
        if (t305==557886) goto L75;
        if (t305!=45) goto L70;
        t303=-1;
        goto L74;
    L70:
        if(t305!=46) goto L71;
        t304=0;
        goto L74;
    L71:
        if(t305>=58) goto L76;
        if(t305>47) goto L72;
    L76:
        print("%c",99);
        print("%c",97);
        print("%c",115);
        print("%c",116);
        print("%c",32);
        print("%c",101);
        print("%c",114);
        print("%c",114);
        print("%c",111);
        print("%c",114);
        print("%c",32);
        t313=p+2;
        t314=stack[t313];
        t315=p+3;
        t316=stack[t315];
        print("%e",t314);
        print("%c",44);
        print("%e",t316);
        goto L1;
    L72:
        if(t304!=1) goto L73;
        t306=t300*10;
        t307=t306+t305;
        t308=t307-48;
        t300=t308;
        goto L74;
    L73:
        t309=t305-48;
        t310=t309/t302;
        t311=t301+t310;
        t301=t311;
        t302=t302*10;
    L74:
        t299=t299+1;
        goto L69;
    L75:
        t312=t300+t301;
        t300=t312*t303;
        stack[p]=t300;
}
void toUpper(){
        stack[p]=h;
        t317=p+1;
        t318=stack[t317];
    L77:
        t319=heap[t318];
        if (t319==557886) goto L78;
        if (t319<=64) goto L79;
        if (t319>=92) goto L79;
        t319=t319+32;
        goto L80;
    L79:
    L80:
        heap[h]=t319;
        t318=t318+1;
        h=h+1;
        goto L77;
    L78:
        heap[h]=557886;
        h=h+1;
}
void toUpper(){
        stack[p]=h;
        t320=p+1;
        t321=stack[t320];
    L81:
        t322=heap[t321];
        if (t322==557886) goto L82;
        if (t322>96) goto L83;
        if (t322<123) goto L84;
        goto L84;
    L83:
        t322=t322-32;
        goto L85;
    L84:
    L85:
        heap[h]=t322;
        t321=t321+1;
        h=h+1;
        goto L81;
    L82:
        heap[h]=557886;
        h=h+1;
}
void stringSize(){
        t323=p+1;
        t324=stack[t323];
        t326=0;
    L86:
        t325=heap[t324];
        if (t325==557886) goto L87;
        t326=t326+1;
        t324=t324+1;
        goto L86;
    L87:
        stack[p]=t326;
}
void initArray(){
        stack[p]=h;
        t327=p+1;
        t328=stack[t327];
        t327=p+2;
        t330=stack[t327];
        t327=p+3;
        t331=stack[t327];
        t327=p+4;
        t332=stack[t327];
        t333=t330+t328;
        t334=heap[t333];
        heap[h]=t334;
        h=h+1;
        if(t331==1) goto L88;
        t335=h;
        t336=0;
    L89:
        if(t336>=t334) goto L90;
        h=h+1;
        t336=t336+1;
        goto L89;
    L90:
        t336=0;
    L91:
        if(t336>=t334) goto L92;
        t337=t328+1;
        t338=t331-1;
        t329=p+5;
        stack[t329]=t327;
        t329=p+6;
        stack[t329]=t328;
        t329=p+7;
        stack[t329]=t330;
        t329=p+8;
        stack[t329]=t331;
        t329=p+9;
        stack[t329]=t332;
        t329=p+10;
        stack[t329]=t333;
        t329=p+11;
        stack[t329]=t334;
        t329=p+12;
        stack[t329]=t335;
        t329=p+13;
        stack[t329]=t336;
        t329=p+14;
        stack[t329]=t337;
        t329=p+15;
        stack[t329]=t338;
        t339=p+16;
        t340=t339+1;
        stack[t340]=t337;
        t341=t339+2;
        stack[t341]=t330;
        t342=t339+3;
        stack[t342]=t338;
        t343=t339+4;
        stack[t343]=t332;
        p=p+ 16;
        call initArray();
        t344=stack[p];
        p=p- 16;
        t329=p+5;
        t327=stack[t329];
        t329=p+6;
        t328=stack[t329];
        t329=p+7;
        t330=stack[t329];
        t329=p+8;
        t331=stack[t329];
        t329=p+9;
        t332=stack[t329];
        t329=p+10;
        t333=stack[t329];
        t329=p+11;
        t334=stack[t329];
        t329=p+12;
        t335=stack[t329];
        t329=p+13;
        t336=stack[t329];
        t329=p+14;
        t337=stack[t329];
        t329=p+15;
        t338=stack[t329];
        t345=t335+t336;
        heap[t345]=t344;
        t336=t336+1;
        goto L91;
    L92:
        goto L95;
    L88:
        t346=0;
    L93:
        if(t346>=t334) goto L94;
        heap[h]=t332;
        h=h+1;
        t346=t346+1;
        goto L93;
    L94:
    L95:
}
void getSize(){
        t347=p+1;
        t348=stack[t347];
        t350=p+2;
        t351=stack[t350];
        if(t351!=1) goto L96;
        t352=heap[t348];
        stack[p]=t352;
        goto L99;
    L96:
        t353=0;
        t354=heap[t348];
        t355=0;
    L97:
        if(t355>=t354) goto L98;
        t356=t355+t348;
        t357=1+t356;
        t358=heap[t357];
        t359=t351-1;
        t349=p+3;
        stack[t349]=t347;
        t349=p+4;
        stack[t349]=t348;
        t349=p+5;
        stack[t349]=t350;
        t349=p+6;
        stack[t349]=t351;
        t349=p+7;
        stack[t349]=t352;
        t349=p+8;
        stack[t349]=t353;
        t349=p+9;
        stack[t349]=t354;
        t349=p+10;
        stack[t349]=t355;
        t349=p+11;
        stack[t349]=t356;
        t349=p+12;
        stack[t349]=t357;
        t349=p+13;
        stack[t349]=t358;
        t349=p+14;
        stack[t349]=t359;
        t360=p+15;
        t361=t360+1;
        stack[t361]=t358;
        t362=t360+2;
        stack[t362]=t359;
        p=p+15;
        call getSize();
        t363=stack[p];
        p=p-15;
        t349=p+3;
        t347=stack[t349];
        t349=p+4;
        t348=stack[t349];
        t349=p+5;
        t350=stack[t349];
        t349=p+6;
        t351=stack[t349];
        t349=p+7;
        t352=stack[t349];
        t349=p+8;
        t353=stack[t349];
        t349=p+9;
        t354=stack[t349];
        t349=p+10;
        t355=stack[t349];
        t349=p+11;
        t356=stack[t349];
        t349=p+12;
        t357=stack[t349];
        t349=p+13;
        t358=stack[t349];
        t349=p+14;
        t359=stack[t349];
        t364=t353+t363;
        t353=t364;
        t355=t355+1;
        goto L97;
    L98:
        stack[p]=t353;
    L99:
}
var p=0;
var h=0;
void metojjpsmain_(){
/*########    DECLARACION    ########*/
       t365=p+1;
       t366=h;
       heap[h]=3;
       h=h+1;
       t367=h;
       h=h+1;
       h=h+1;
       h=h+1;
       t369=h;
       heap[h]=2;
       h=h+1;
       t370=h;
       h=h+1;
       h=h+1;
       t372=h;
       heap[h]=4;
       h=h+1;
       heap[h]=100;
       h=h+1;
       heap[h]=200;
       h=h+1;
       heap[h]=300;
       h=h+1;
       heap[h]=400;
       h=h+1;
       heap[t370]=t372;
       t370=t370+1;
       t373=h;
       heap[h]=4;
       h=h+1;
       heap[h]=500;
       h=h+1;
       heap[h]=600;
       h=h+1;
       heap[h]=700;
       h=h+1;
       heap[h]=800;
       h=h+1;
       heap[t370]=t373;
       t370=t370+1;
       heap[t367]=t369;
       t367=t367+1;
       t374=h;
       heap[h]=2;
       h=h+1;
       t375=h;
       h=h+1;
       h=h+1;
       t377=h;
       heap[h]=4;
       h=h+1;
       heap[h]=900;
       h=h+1;
       heap[h]=1000;
       h=h+1;
       heap[h]=1100;
       h=h+1;
       heap[h]=1200;
       h=h+1;
       heap[t375]=t377;
       t375=t375+1;
       t378=h;
       heap[h]=4;
       h=h+1;
       heap[h]=1300;
       h=h+1;
       heap[h]=1400;
       h=h+1;
       heap[h]=1500;
       h=h+1;
       heap[h]=1600;
       h=h+1;
       heap[t375]=t378;
       t375=t375+1;
       heap[t367]=t374;
       t367=t367+1;
       t379=h;
       heap[h]=2;
       h=h+1;
       t380=h;
       h=h+1;
       h=h+1;
       t382=h;
       heap[h]=4;
       h=h+1;
       heap[h]=1700;
       h=h+1;
       heap[h]=1800;
       h=h+1;
       heap[h]=1900;
       h=h+1;
       heap[h]=2000;
       h=h+1;
       heap[t380]=t382;
       t380=t380+1;
       t383=h;
       heap[h]=4;
       h=h+1;
       heap[h]=2100;
       h=h+1;
       heap[h]=2200;
       h=h+1;
       heap[h]=2300;
       h=h+1;
       heap[h]=2400;
       h=h+1;
       heap[t380]=t383;
       t380=t380+1;
       heap[t367]=t379;
       t367=t367+1;
       stack[t365]=t366;
/*########    SENTENCIA println    ########*/
       t384=p+1;//pos arr
       t385=stack[t384];//referencia al heap
       t386=heap[t385];
       if (2>=t386) goto L1;
       t387=1+2;
       t388=t385+t387;
       t389=heap[t388];
       t390=heap[t389];
       if (1>=t390) goto L1;
       t391=1+1;
       t392=t389+t391;
       t393=heap[t392];
       t394=heap[t393];
       if (3>=t394) goto L1;
       t395=1+3;
       t396=t393+t395;
       t397=heap[t396];
       print("%e",t397);
       print("%c",10);
       t398=p+1;//pos arr
       t399=stack[t398];//referencia al heap
       t400=heap[t399];
       if (2>=t400) goto L1;
       t401=1+2;
       t402=t399+t401;
       t403=heap[t402];
       t404=heap[t403];
       if (1>=t404) goto L1;
       t405=1+1;
       t406=t403+t405;
       t407=heap[t406];
       t408=heap[t407];
       if (3>=t408) goto L1;
       t409=1+3;
       t410=t407+t409;
       t411=heap[t410];
       t412=p+1;//pos arr
       t413=stack[t412];//referencia al heap
       t414=heap[t413];
       if (0>=t414) goto L1;
       t415=1+0;
       t416=t413+t415;
       t417=heap[t416];
       t418=heap[t417];
       if (0>=t418) goto L1;
       t419=1+0;
       t420=t417+t419;
       t421=heap[t420];
       t422=heap[t421];
       if (0>=t422) goto L1;
       t423=1+0;
       t424=t421+t423;
       t425=heap[t424];
       heap[t410]=t425;
/*########    SENTENCIA println    ########*/
       t426=p+1;//pos arr
       t427=stack[t426];//referencia al heap
       t428=heap[t427];
       if (2>=t428) goto L1;
       t429=1+2;
       t430=t427+t429;
       t431=heap[t430];
       t432=heap[t431];
       if (1>=t432) goto L1;
       t433=1+1;
       t434=t431+t433;
       t435=heap[t434];
       t436=heap[t435];
       if (3>=t436) goto L1;
       t437=1+3;
       t438=t435+t437;
       t439=heap[t438];
       print("%e",t439);
       print("%c",10);
/*########    DECLARACION    ########*/
       t440=p+2;
       stack[t440]=50;
/*########    SENTENCIA println    ########*/
       t441=p+2;
       t442=stack[t441];
       print("%e",t442);
       print("%c",10);
/*########    SENTENCIA println    ########*/
/*########    post incremento    ########*/
       t444=p+2;
       t445=stack[t444];
       t443=t445+1;
       stack[t444]=t443;
       print("%e",t445);
       print("%c",10);
/*########    SENTENCIA println    ########*/
       t446=p+2;
       t447=stack[t446];
       print("%e",t447);
       print("%c",10);
/*########    SENTENCIA println    ########*/
/*########    pre incremento    ########*/
       t450=p+2;
       t451=stack[t450];
       t449=t451+1;
       stack[t450]=t449;
       print("%e",t449);
       print("%c",10);
/*########    SENTENCIA println    ########*/
       t452=p+2;
       t453=stack[t452];
       print("%e",t453);
       print("%c",10);
/*########    SENTENCIA println    ########*/
/*########    post decremento    ########*/
       t455=p+2;
       t456=stack[t455];
       t454=t456-1;
       stack[t455]=t454;
       print("%e",t456);
       print("%c",10);
/*########    SENTENCIA println    ########*/
       t457=p+2;
       t458=stack[t457];
       print("%e",t458);
       print("%c",10);
/*########    SENTENCIA println    ########*/
/*########    pre decremento    ########*/
       t461=p+2;
       t462=stack[t461];
       t460=t462-1;
       stack[t461]=t460;
       print("%e",t460);
       print("%c",10);
/*########    SENTENCIA println    ########*/
       t463=p+2;
       t464=stack[t463];
       print("%e",t464);
       print("%c",10);
/*########    SENTENCIA println    ########*/
       t465=h;
       heap[h]=45;
       h=h+1;
       heap[h]=45;
       h=h+1;
       heap[h]=45;
       h=h+1;
       heap[h]=45;
       h=h+1;
       heap[h]=557886;
       h=h+1;
       t466=p+4;
       t467=t466+1;
       stack[t467]=t465;
       p=p+4;
       call print_olcp2jjps();
       p=p-4;
       print("%c",10);
/*########    SENTENCIA println    ########*/
       t468=p+1;//pos arr
       t469=stack[t468];//referencia al heap
       t470=heap[t469];
       if (2>=t470) goto L1;
       t471=1+2;
       t472=t469+t471;
       t473=heap[t472];
       t474=heap[t473];
       if (1>=t474) goto L1;
       t475=1+1;
       t476=t473+t475;
       t477=heap[t476];
       t478=heap[t477];
       if (3>=t478) goto L1;
       t479=1+3;
       t480=t477+t479;
       t481=heap[t480];
       print("%e",t481);
       print("%c",10);
/*########    SENTENCIA println    ########*/
/*########    post incremento    ########*/
       t483=p+1;//pos arr
       t484=stack[t483];//referencia al heap
       t485=heap[t484];
       if (2>=t485) goto L1;
       t486=1+2;
       t487=t484+t486;
       t488=heap[t487];
       t489=heap[t488];
       if (1>=t489) goto L1;
       t490=1+1;
       t491=t488+t490;
       t492=heap[t491];
       t493=heap[t492];
       if (3>=t493) goto L1;
       t494=1+3;
       t495=t492+t494;
       t496=heap[t495];
       t482=t496+1;
       heap[t495]=t482;
       print("%e",t496);
       print("%c",10);
/*########    SENTENCIA println    ########*/
       t497=p+1;//pos arr
       t498=stack[t497];//referencia al heap
       t499=heap[t498];
       if (2>=t499) goto L1;
       t500=1+2;
       t501=t498+t500;
       t502=heap[t501];
       t503=heap[t502];
       if (1>=t503) goto L1;
       t504=1+1;
       t505=t502+t504;
       t506=heap[t505];
       t507=heap[t506];
       if (3>=t507) goto L1;
       t508=1+3;
       t509=t506+t508;
       t510=heap[t509];
       print("%e",t510);
       print("%c",10);
/*########    SENTENCIA println    ########*/
/*########    pre incremento    ########*/
       t513=p+1;//pos arr
       t514=stack[t513];//referencia al heap
       t515=heap[t514];
       if (2>=t515) goto L1;
       t516=1+2;
       t517=t514+t516;
       t518=heap[t517];
       t519=heap[t518];
       if (1>=t519) goto L1;
       t520=1+1;
       t521=t518+t520;
       t522=heap[t521];
       t523=heap[t522];
       if (3>=t523) goto L1;
       t524=1+3;
       t525=t522+t524;
       t526=heap[t525];
       t512=t526+1;
       heap[t525]=t512;
       print("%e",t512);
       print("%c",10);
/*########    SENTENCIA println    ########*/
       t527=p+1;//pos arr
       t528=stack[t527];//referencia al heap
       t529=heap[t528];
       if (2>=t529) goto L1;
       t530=1+2;
       t531=t528+t530;
       t532=heap[t531];
       t533=heap[t532];
       if (1>=t533) goto L1;
       t534=1+1;
       t535=t532+t534;
       t536=heap[t535];
       t537=heap[t536];
       if (3>=t537) goto L1;
       t538=1+3;
       t539=t536+t538;
       t540=heap[t539];
       print("%e",t540);
       print("%c",10);
/*########    SENTENCIA println    ########*/
/*########    post decremento    ########*/
       t542=p+1;//pos arr
       t543=stack[t542];//referencia al heap
       t544=heap[t543];
       if (2>=t544) goto L1;
       t545=1+2;
       t546=t543+t545;
       t547=heap[t546];
       t548=heap[t547];
       if (1>=t548) goto L1;
       t549=1+1;
       t550=t547+t549;
       t551=heap[t550];
       t552=heap[t551];
       if (3>=t552) goto L1;
       t553=1+3;
       t554=t551+t553;
       t555=heap[t554];
       t541=t555-1;
       heap[t554]=t541;
       print("%e",t555);
       print("%c",10);
/*########    SENTENCIA println    ########*/
       t556=p+1;//pos arr
       t557=stack[t556];//referencia al heap
       t558=heap[t557];
       if (2>=t558) goto L1;
       t559=1+2;
       t560=t557+t559;
       t561=heap[t560];
       t562=heap[t561];
       if (1>=t562) goto L1;
       t563=1+1;
       t564=t561+t563;
       t565=heap[t564];
       t566=heap[t565];
       if (3>=t566) goto L1;
       t567=1+3;
       t568=t565+t567;
       t569=heap[t568];
       print("%e",t569);
       print("%c",10);
/*########    SENTENCIA println    ########*/
/*########    pre decremento    ########*/
       t572=p+1;//pos arr
       t573=stack[t572];//referencia al heap
       t574=heap[t573];
       if (2>=t574) goto L1;
       t575=1+2;
       t576=t573+t575;
       t577=heap[t576];
       t578=heap[t577];
       if (1>=t578) goto L1;
       t579=1+1;
       t580=t577+t579;
       t581=heap[t580];
       t582=heap[t581];
       if (3>=t582) goto L1;
       t583=1+3;
       t584=t581+t583;
       t585=heap[t584];
       t571=t585-1;
       heap[t584]=t571;
       print("%e",t571);
       print("%c",10);
/*########    SENTENCIA println    ########*/
       t586=p+1;//pos arr
       t587=stack[t586];//referencia al heap
       t588=heap[t587];
       if (2>=t588) goto L1;
       t589=1+2;
       t590=t587+t589;
       t591=heap[t590];
       t592=heap[t591];
       if (1>=t592) goto L1;
       t593=1+1;
       t594=t591+t593;
       t595=heap[t594];
       t596=heap[t595];
       if (3>=t596) goto L1;
       t597=1+3;
       t598=t595+t597;
       t599=heap[t598];
       print("%e",t599);
       print("%c",10);
   L100:
}
       L1:
