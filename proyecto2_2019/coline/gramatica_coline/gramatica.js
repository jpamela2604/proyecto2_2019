/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,11],$V2=[1,12],$V3=[1,13],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[1,18],$V9=[1,19],$Va=[1,20],$Vb=[1,22],$Vc=[5,36,49,50,51,52,53,54,56,57,58,59,60],$Vd=[1,33],$Ve=[36,49,50,51,52,53,54,56,57,58,59,60],$Vf=[41,43],$Vg=[1,50],$Vh=[1,68],$Vi=[1,69],$Vj=[1,67],$Vk=[1,59],$Vl=[1,53],$Vm=[1,54],$Vn=[1,55],$Vo=[1,58],$Vp=[1,57],$Vq=[1,70],$Vr=[1,51],$Vs=[1,52],$Vt=[1,73],$Vu=[10,29],$Vv=[1,74],$Vw=[10,32],$Vx=[2,49],$Vy=[1,77],$Vz=[2,26,27,30,36,41,49,50,51,52,53,54,56,57,58,59,60,61,68,69,70,71,72,77,78,79],$VA=[1,90],$VB=[1,91],$VC=[1,89],$VD=[1,102],$VE=[1,97],$VF=[1,101],$VG=[1,100],$VH=[1,106],$VI=[1,107],$VJ=[1,108],$VK=[1,109],$VL=[1,110],$VM=[1,111],$VN=[1,118],$VO=[10,26,27,32,43,44,65,80,81,82,85,88,89,90,91,92,93,94,95,96,97,98,107],$VP=[10,32,43,65,80,81,82,85,88,89,90,91,92,93,94,95,96,97,98],$VQ=[2,26,27,30,36,41,49,50,51,52,53,54,56,57,58,59,60,61,68,69,70,71,72,74,77,78,79],$VR=[1,129],$VS=[1,137],$VT=[1,138],$VU=[1,139],$VV=[1,140],$VW=[10,32,43,65,80,81,82,85],$VX=[1,143],$VY=[1,144],$VZ=[1,145],$V_=[1,146],$V$=[1,147],$V01=[10,32,39,43,44],$V11=[10,29,39],$V21=[32,43],$V31=[26,27,41,42,95,99,101,102,103,104,105,106],$V41=[10,32,43,65,80,81,82,85,88,89,90,91,92,93,94,95],$V51=[1,220],$V61=[1,221],$V71=[30,64,67];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"INICIO":3,"S":4,"ENDOFFILE":5,"LISENT":6,"OPCG":7,"DECLAMETO":8,"DECLARACION":9,"ptocoma":10,"L":11,"SENT":12,"IMPRIMIR":13,"S_BREAK":14,"S_CON":15,"S_RETORNO":16,"S_IF":17,"S_WHILE":18,"S_DO":19,"S_SW":20,"ASIGNACION":21,"LAC":22,"UNAR":23,"PREFIJO":24,"POSTFIJO":25,"incr":26,"decr":27,"CABEZAMET":28,"llava":29,"llavc":30,"PARAMS":31,"coma":32,"PARAM":33,"TIPO":34,"ARRID":35,"ffinal_":36,"MODSCAMPO":37,"DEM":38,"cora":39,"corc":40,"er_id":41,"para":42,"parc":43,"is":44,"INICIALIZA":45,"LDEC":46,"DEC":47,"COND":48,"t_int":49,"t_char":50,"t_double":51,"t_boolean":52,"t_string":53,"vacio":54,"MOC":55,"protegido_":56,"publico_":57,"privado_":58,"estatico_":59,"abstracto_":60,"switch_":61,"LCASOS":62,"DEFECTO":63,"default_":64,"dosptos":65,"CASO":66,"case_":67,"break_":68,"continue_":69,"return_":70,"dow":71,"while_":72,"BS_IF":73,"else_":74,"SINO":75,"SI":76,"if_":77,"print_":78,"println_":79,"and_":80,"or_":81,"xor_":82,"not_":83,"REL":84,"ques":85,"E":86,"OPREL":87,"menori":88,"mayori":89,"igual":90,"dif":91,"menor":92,"mayor":93,"mas":94,"menos":95,"por":96,"divis":97,"modu":98,"potencia":99,"PRIM":100,"er_cadena":101,"er_caracter":102,"er_entero":103,"er_decimal":104,"verdadero":105,"falso":106,"punto":107,"AC":108,"LLAMADA":109,"LCOND":110,"$accept":0,"$end":1},
terminals_: {2:"error",5:"ENDOFFILE",10:"ptocoma",26:"incr",27:"decr",29:"llava",30:"llavc",32:"coma",36:"ffinal_",39:"cora",40:"corc",41:"er_id",42:"para",43:"parc",44:"is",49:"t_int",50:"t_char",51:"t_double",52:"t_boolean",53:"t_string",54:"vacio",56:"protegido_",57:"publico_",58:"privado_",59:"estatico_",60:"abstracto_",61:"switch_",64:"default_",65:"dosptos",67:"case_",68:"break_",69:"continue_",70:"return_",71:"dow",72:"while_",74:"else_",77:"if_",78:"print_",79:"println_",80:"and_",81:"or_",82:"xor_",83:"not_",85:"ques",88:"menori",89:"mayori",90:"igual",91:"dif",92:"menor",93:"mayor",94:"mas",95:"menos",96:"por",97:"divis",98:"modu",99:"potencia",101:"er_cadena",102:"er_caracter",103:"er_entero",104:"er_decimal",105:"verdadero",106:"falso",107:"punto"},
productions_: [0,[3,2],[4,1],[6,2],[6,1],[7,1],[7,2],[11,2],[11,1],[12,2],[12,2],[12,2],[12,2],[12,1],[12,1],[12,2],[12,1],[12,2],[12,2],[12,2],[12,2],[12,2],[23,1],[23,1],[24,2],[24,2],[25,2],[25,2],[8,4],[8,3],[8,2],[31,3],[31,1],[33,2],[33,3],[28,3],[28,2],[38,3],[38,4],[38,3],[21,3],[9,3],[9,2],[46,3],[46,1],[47,3],[47,1],[45,1],[35,3],[35,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[37,2],[37,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[20,7],[20,8],[20,7],[63,2],[63,5],[63,4],[62,2],[62,1],[66,6],[66,5],[66,3],[14,1],[15,1],[16,2],[16,1],[19,8],[19,7],[18,7],[18,6],[17,5],[17,4],[17,1],[73,2],[73,1],[76,6],[76,7],[75,7],[75,8],[13,4],[13,4],[48,3],[48,3],[48,3],[48,2],[48,1],[48,5],[84,3],[84,1],[87,1],[87,1],[87,1],[87,1],[87,1],[87,1],[86,3],[86,3],[86,3],[86,3],[86,3],[86,6],[86,2],[86,3],[86,1],[86,1],[86,4],[86,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[22,3],[22,1],[108,1],[108,1],[110,3],[110,1],[109,3],[109,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

					//typeof console !== 'undefined' ? console.log($$[$0-1]) : print($$[$0-1]);
					//console.log("aceptada");
					return $$[$0-1];
				
break;
case 2: case 5: case 13: case 14: case 16: case 22: case 23: case 46: case 47: case 98: case 101: case 116: case 119: case 128:

                    this.$=$$[$0];
                
break;
case 3: case 56: case 70: case 86:

                    this.$=$$[$0-1];
                    this.$.push($$[$0]);
                
break;
case 4: case 71: case 87: case 127: case 131:

                    this.$=new Array();
                    this.$.push($$[$0]);
                
break;
case 6:

                    this.$=$$[$0-1];
                    this.$.IsGlobal=true;
                
break;
case 7:

                    this.$=$$[$0-1];
                    if($$[$0]!=null)
                    {this.$.push($$[$0]);}
                
break;
case 8:

                    this.$=new Array();
                    if($$[$0]!=null)
                    {this.$.push($$[$0]);}
                
break;
case 9: case 10: case 11: case 12: case 15: case 17: case 18: case 20: case 115:

                    this.$=$$[$0-1];
                
break;
case 19:

                    vari.hash++;
                    this.$=new s_accesos($$[$0-1],vari.hash);
                
break;
case 21:

					 ErrorSintactico("falta un punto y coma ",yylineno,0);
                     this.$=null;									
				
break;
case 24:

                    vari.hash++;
                    var aco=new s_accesos($$[$0],vari.hash);
                    vari.hash++;
                    this.$=new  o_preInc(aco,_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);  
                
break;
case 25:

                    vari.hash++;
                    var aco=new s_accesos($$[$0],vari.hash);
                    vari.hash++;
                    this.$=new o_preDecr(aco,_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 26:

                    vari.hash++;
                    var aco=new s_accesos($$[$0-1],vari.hash);
                    vari.hash++;
                    this.$=new o_postInc(aco,_$[2].first_line,_$[2].first_column,vari.archivo,vari.hash);
                
break;
case 27:

                    vari.hash++;
                    var aco=new s_accesos($$[$0-1],vari.hash);
                    vari.hash++;
                    this.$=new o_postDecr(aco,_$[2].first_line,_$[2].first_column,vari.archivo,vari.hash);
                
break;
case 28:

                    this.$=$$[$0-3];
                    this.$.isAbstract=false;
                    this.$.sentencias=$$[$0-1];
                
break;
case 29:

                    this.$=$$[$0-2];
                    this.$.isAbstract=false;
                    this.$.sentencias=new Array();
                
break;
case 30:

                    this.$=$$[$0-1];
                    this.$.isAbstract=true;
                    this.$.sentencias=null;
                
break;
case 31: case 126:

                    this.$=$$[$0-2];
                    this.$.push($$[$0]);
                
break;
case 32: case 44:

                    this.$=new Array();
                    this.$.push($$[$0]); 
                
break;
case 33:

                    vari.hash++;
                    //(tipo,nombre,valor,isFinal,noDimensiones,linea,columna,archivo,hash)
                    this.$=new parametro($$[$0-1],$$[$0].id,null,false,$$[$0].noDimensiones,$$[$0].linea,$$[$0].columna,
                    $$[$0].archivo,vari.hash);
				
break;
case 34:

                    vari.hash++;
                    //(tipo,nombre,valor,isFinal,noDimensiones,linea,columna,archivo,hash)
                    this.$=new parametro($$[$0-1],$$[$0].id,null,true,$$[$0].noDimensiones,$$[$0].linea,$$[$0].columna,
                    $$[$0].archivo,vari.hash);
				
break;
case 35:

                    $$[$0].tipo=$$[$0-1];
                    $$[$0].modificadores=$$[$0-2];
                    this.$=$$[$0];  
				
break;
case 36:

                    $$[$0].tipo=$$[$0-1];
                    this.$=$$[$0];                    
				
break;
case 37:

                    this.$=$$[$0-2];
                    this.$.noDimensiones++;
				
break;
case 38:

                    vari.hash++;
                    //isAbstract,id,sentencias,parametros,modificadores,tipo,noDimensiones,linea,columna,archivo,hash) 
                    this.$=new s_metodo(null,$$[$0-3],null,$$[$0-1],new Array(),null,0,_$[1].first_line,_$[1].first_column,
                    vari.archivo,vari.hash);
				
break;
case 39:

                    vari.hash++;
                    //isAbstract,id,sentencias,parametros,modificadores,tipo,noDimensiones,linea,columna,archivo,hash) 
                    this.$=new s_metodo(null,$$[$0-2],null,new Array(),new Array(),null,0,_$[1].first_line,_$[1].first_column,
                    vari.archivo,vari.hash);
				
break;
case 40:

                    vari.hash++;
                    var ace=new s_accesos($$[$0-2],vari.hash);
                    vari.hash++;
                    this.$=new s_asignacion(ace,$$[$0],_$[2].first_line,_$[2].first_column,vari.archivo,vari.hash);
                
break;
case 41:

                    vari.hash++;
                    this.$=new s_declaracion($$[$0-2],$$[$0-1],$$[$0],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 42:

                    vari.hash++;
                    this.$=new s_declaracion(new Array(),$$[$0-1],$$[$0],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 43:

                    this.$=$$[$0-2];
                    this.$.push($$[$0-1]);
                
break;
case 45:

                    this.$=$$[$0-2];
                    this.$.valor=$$[$0];
                
break;
case 48:

                    this.$=$$[$0-2];
                    this.$.noDimensiones=this.$.noDimensiones+1;

                
break;
case 49:

                    vari.hash++;
                    this.$=new s_decla($$[$0],0,null,_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 50:

                    this.$=tablaTipos.tipo_entero;
                
break;
case 51:

                    this.$=tablaTipos.tipo_caracter;
                
break;
case 52:

                    this.$=tablaTipos.tipo_doble;
                
break;
case 53:

                    this.$=tablaTipos.tipo_booleano;
                
break;
case 54:

                    this.$=tablaTipos.tipo_cadena;
                
break;
case 55:

                    this.$=tablaTipos.tipo_vacio;
                
break;
case 57:

                    this.$=new Array();
                    this.$.push($$[$0]);   
                
break;
case 58:

                    this.$=tablaTipos.protegido;
                
break;
case 59:

                    this.$=tablaTipos.publico;
                
break;
case 60:

                    this.$=tablaTipos.privado;
                
break;
case 61:

                    this.$=tablaTipos.estatico;
                
break;
case 62:

                    this.$=tablaTipos.ffinal;
                
break;
case 63:

                    this.$=tablaTipos.abstracto;
                
break;
case 64:

                    vari.hash++;
                    this.$=new s_switch($$[$0-4],$$[$0-1],null,_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 65:

                    vari.hash++;
                    this.$=new s_switch($$[$0-5],$$[$0-2],$$[$0-1],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 66:

                    vari.hash++;
                    this.$=new s_switch($$[$0-4],new Array(),$$[$0-1],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 67: case 69:

                    vari.hash++;
                    this.$=new caso(null,new Array(),_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 68:

                    vari.hash++;
                    this.$=new caso(null,$$[$0-1],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 72:

                    vari.hash++;
                    this.$=new caso($$[$0-4],$$[$0-1],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 73:

                    vari.hash++;
                    this.$=new caso($$[$0-3],new Array(),_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 74:

                    vari.hash++;
                    this.$=new caso($$[$0-1],new Array(),_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 75:

                    vari.hash++;
                    this.$=new s_break(_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 76:

                    vari.hash++;
                    this.$=new s_continue(_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 77:

                    vari.hash++;
                    this.$=new s_retorno($$[$0],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 78:

                    vari.hash++;
                    this.$=new s_retornoEmpty(_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 79:

                    vari.hash++;
                    this.$=new s_do_while($$[$0-1],$$[$0-5],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 80:

                    vari.hash++;
                    this.$=new s_do_while($$[$0-1],new Array(),_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 81:

                    vari.hash++;
                    this.$=new s_while($$[$0-4],$$[$0-1],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 82:

                    vari.hash++;
                    this.$=new s_while($$[$0-3],new Array(),_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 83:

                    vari.hash++;
                    var bloque=new s_bloque(null,$$[$0-1],_$[2].first_line,_$[2].first_column,vari.archivo,vari.hash);
                    $$[$0-4].push(bloque);
                    vari.hash++;
                    this.$=new s_if($$[$0-4],vari.hash);
                
break;
case 84:

                    vari.hash++;
                    var bloque=new s_bloque(null,new Array(),_$[2].first_line,_$[2].first_column,vari.archivo,vari.hash);
                    $$[$0-3].push(bloque);
                    vari.hash++;
                    this.$=new s_if($$[$0-3],vari.hash);
                
break;
case 85:

                    vari.hash++;
                    this.$=new s_if($$[$0],vari.hash);
                
break;
case 88: case 90:

                    vari.hash++;
                    this.$=new s_bloque($$[$0-3],new Array(),_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 89: case 91:

                    vari.hash++;
                    this.$=new s_bloque($$[$0-4],$$[$0-1],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 92:

                    vari.hash++;
                    this.$=new s_print($$[$0-1],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 93:

                    vari.hash++;
                    this.$=new s_println($$[$0-1],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 94:

                    vari.hash++;
                    this.$=new ol_and($$[$0-2],$$[$0],_$[2].first_line,_$[2].first_column,vari.archivo,vari.hash);
                
break;
case 95:

                    vari.hash++;
                    this.$=new ol_or($$[$0-2],$$[$0],_$[2].first_line,_$[2].first_column,vari.archivo,vari.hash);
                
break;
case 96:

                    vari.hash++;
                    this.$=new ol_xor($$[$0-2],$$[$0],_$[2].first_line,_$[2].first_column,vari.archivo,vari.hash);
                
break;
case 97:

                    vari.hash++;
                    this.$=new ol_not($$[$0],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 99:

                    vari.hash++;
                    this.$=new o_ternario($$[$0-4],$$[$0-2],$$[$0],_$[2].first_line,_$[2].first_column,vari.archivo,vari.hash);
                
break;
case 100:

                    vari.hash++;
                    this.$=new or_relacional($$[$0-1],$$[$0-2],$$[$0],_$[2].first_line,_$[2].first_column,vari.archivo,vari.hash);
                
break;
case 102:

                    this.$="<=";
                
break;
case 103:

                    this.$=">=";
                
break;
case 104:

                    this.$="==";
                
break;
case 105:

                    this.$="!=";
                
break;
case 106:

                    this.$="<";
                
break;
case 107:

                    this.$=">";
                
break;
case 108:

                    vari.hash++;
                    this.$=new oa_suma($$[$0-2],$$[$0],_$[2].first_line,_$[2].first_column,vari.archivo,vari.hash);
                
break;
case 109:

                    vari.hash++;
                    this.$=new oa_resta($$[$0-2],$$[$0],_$[2].first_line,_$[2].first_column,vari.archivo,vari.hash);
                
break;
case 110:

                    vari.hash++;
                    this.$=new oa_multi($$[$0-2],$$[$0],_$[2].first_line,_$[2].first_column,vari.archivo,vari.hash);
                
break;
case 111:

                    vari.hash++;
                    this.$=new oa_division($$[$0-2],$$[$0],_$[2].first_line,_$[2].first_column,vari.archivo,vari.hash);
                
break;
case 112:

                    vari.hash++;
                    this.$=new oa_modular($$[$0-2],$$[$0],_$[2].first_line,_$[2].first_column,vari.archivo,vari.hash);
                
break;
case 113:

                    vari.hash++;
                    this.$=new oa_potencia($$[$0-3],$$[$0-1],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 114:

                    vari.hash++;
                    this.$=new oa_negativo($$[$0],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 117:

                    vari.hash++;
                    var ace=new s_accesos($$[$0],vari.hash);
                    vari.hash++;
                    this.$=new o_valorPuntual(null,ace,_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);

                
break;
case 118:

                    vari.hash++;
                    this.$=new oa_casteo($$[$0-2],$$[$0],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 120:

                    var a=yytext+"";
                    a=a.substring(1,a.length-1);
                    vari.hash++;
                    this.$=new o_valorPuntual(tablaTipos.tipo_cadena,a,_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 121:

                    var a=yytext+"";
                    a=a.substring(1,a.length-1);
                    //console.log("|"+a+"|");
                    if(a=="\\n")
                    {
                        //console.log("entro");
                        a=10;
                    }else
                    {
                        a=a.charCodeAt();
                    }
                    vari.hash++;
                    this.$=new o_valorPuntual(tablaTipos.tipo_caracter,a,_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 122:

                    vari.hash++;
                    this.$=new o_valorPuntual(tablaTipos.tipo_entero,yytext,_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 123:

                    vari.hash++;
                    this.$=new o_valorPuntual(tablaTipos.tipo_doble,yytext,_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 124:

                    vari.hash++;
                    this.$=new o_valorPuntual(tablaTipos.tipo_booleano,1,_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 125:

                    vari.hash++;
                    this.$=new o_valorPuntual(tablaTipos.tipo_booleano,0,_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 129:

                    vari.hash++;
                    this.$=new s_acVariable(yytext,_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 130:

                    this.$=$$[$0-2];
                    this.$.push($$[$0]);

                
break;
case 132:

                    vari.hash++;
                    this.$=new s_llamada($$[$0-2],new Array(),_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 133:

                    vari.hash++;
                    this.$=new s_llamada($$[$0-3],$$[$0-1],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,28:7,34:9,36:$V0,37:8,49:$V1,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:10,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb},{1:[3]},{5:[1,23]},{5:[2,2],7:24,8:5,9:6,28:7,34:9,36:$V0,37:8,49:$V1,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:10,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb},o($Vc,[2,4]),o($Vc,[2,5]),{10:[1,25]},{10:[1,27],29:[1,26]},{34:28,36:$V0,49:$V1,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:29,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb},{35:34,38:31,41:$Vd,46:30,47:32},o($Ve,[2,57]),o($Vf,[2,50]),o($Vf,[2,51]),o($Vf,[2,52]),o($Vf,[2,53]),o($Vf,[2,54]),o($Vf,[2,55]),o($Ve,[2,58]),o($Ve,[2,59]),o($Ve,[2,60]),o($Ve,[2,61]),o($Ve,[2,62]),o($Ve,[2,63]),{1:[2,1]},o($Vc,[2,3]),o($Vc,[2,6]),{2:$Vg,9:46,11:35,12:37,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,23:49,24:63,25:64,26:$Vh,27:$Vi,30:[1,36],34:61,36:$V0,37:60,41:$Vj,49:$V1,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:10,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:56,76:65,77:$Vq,78:$Vr,79:$Vs,108:62,109:66},o($Vc,[2,30]),{35:34,38:72,41:$Vd,46:71,47:32},o($Ve,[2,56]),{10:[2,42],32:$Vt},o($Vu,[2,36],{39:$Vv}),o($Vw,[2,44]),o([10,32,39,44],$Vx,{42:[1,75]}),o($Vw,[2,46],{39:$Vy,44:[1,76]}),{2:$Vg,9:46,12:79,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,23:49,24:63,25:64,26:$Vh,27:$Vi,30:[1,78],34:61,36:$V0,37:60,41:$Vj,49:$V1,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:10,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:56,76:65,77:$Vq,78:$Vr,79:$Vs,108:62,109:66},o($Vc,[2,29]),o($Vz,[2,8]),{10:[1,80]},{10:[1,81]},{10:[1,82]},{10:[1,83]},o($Vz,[2,13]),o($Vz,[2,14]),{10:[1,84]},o($Vz,[2,16]),{10:[1,85]},{10:[1,86]},{10:[1,87],26:$VA,27:$VB,44:[1,88],107:$VC},{10:[1,92]},{10:[1,93]},{42:[1,94]},{42:[1,95]},{10:[2,75]},{10:[2,76]},{10:[2,78],22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,41:$Vj,42:$VD,48:96,83:$VE,84:98,86:99,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66},o($Vz,[2,85],{75:113,74:[1,112]}),{42:[1,114]},{29:[1,115]},{42:[1,116]},{34:117,36:$V0,49:$V1,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:29,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb},{35:34,41:$VN,46:30,47:32},o($VO,[2,127]),o($VP,[2,22]),o($VP,[2,23]),o($VQ,[2,87]),o($VO,[2,128]),o($VO,[2,129],{42:[1,119]}),{22:120,41:$Vj,108:62,109:66},{22:121,41:$Vj,108:62,109:66},{42:[1,122]},{10:[2,41],32:$Vt},o($Vu,[2,35],{39:$Vv}),{35:34,41:$VN,47:123},{40:[1,124]},{31:125,33:127,34:128,36:$VR,43:[1,126],49:$V1,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6},{22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,41:$Vj,42:$VD,45:130,48:131,83:$VE,84:98,86:99,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66},{40:[1,132]},o($Vc,[2,28]),o($Vz,[2,7]),o($Vz,[2,9]),o($Vz,[2,10]),o($Vz,[2,11]),o($Vz,[2,12]),o($Vz,[2,15]),o($Vz,[2,17]),o($Vz,[2,18]),o($Vz,[2,19]),{22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,41:$Vj,42:$VD,45:133,48:131,83:$VE,84:98,86:99,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66},{41:$Vj,108:134,109:66},o($VP,[2,26]),o($VP,[2,27]),o($Vz,[2,20]),o($Vz,[2,21]),{22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,41:$Vj,42:$VD,48:135,83:$VE,84:98,86:99,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66},{22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,41:$Vj,42:$VD,48:136,83:$VE,84:98,86:99,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66},{10:[2,77],80:$VS,81:$VT,82:$VU,85:$VV},{22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,41:$Vj,42:$VD,48:141,83:$VE,84:98,86:99,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66},o($VW,[2,98]),o($VW,[2,101],{87:142,88:[1,148],89:[1,149],90:[1,150],91:[1,151],92:[1,152],93:[1,153],94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$}),{42:[1,154]},{22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,41:$Vj,42:$VD,86:155,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66},{22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,34:157,41:$Vj,42:$VD,48:156,49:$V1,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,83:$VE,84:98,86:99,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66},o($VP,[2,116]),o($VP,[2,117],{26:$VA,27:$VB,107:$VC}),o($VP,[2,119]),o($VP,[2,120]),o($VP,[2,121]),o($VP,[2,122]),o($VP,[2,123]),o($VP,[2,124]),o($VP,[2,125]),{29:[1,158],77:[1,159]},o($VQ,[2,86]),{22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,41:$Vj,42:$VD,48:160,83:$VE,84:98,86:99,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66},{2:$Vg,9:46,11:161,12:37,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,23:49,24:63,25:64,26:$Vh,27:$Vi,30:[1,162],34:61,36:$V0,37:60,41:$Vj,49:$V1,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:10,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:56,76:65,77:$Vq,78:$Vr,79:$Vs,108:62,109:66},{22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,41:$Vj,42:$VD,48:163,83:$VE,84:98,86:99,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66},{35:34,41:$VN,46:71,47:32},o($V01,$Vx),{22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,41:$Vj,42:$VD,43:[1,164],45:166,48:131,83:$VE,84:98,86:99,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66,110:165},o($VP,[2,24],{107:$VC}),o($VP,[2,25],{107:$VC}),{22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,41:$Vj,42:$VD,48:167,83:$VE,84:98,86:99,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66},o($Vw,[2,43]),o($V11,[2,37]),{32:[1,169],43:[1,168]},o($V11,[2,39]),o($V21,[2,32]),{35:170,41:$VN},{34:171,49:$V1,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6},o($Vw,[2,45]),o([10,32,43],[2,47],{80:$VS,81:$VT,82:$VU,85:$VV}),o($V01,[2,48]),{10:[2,40]},o($VO,[2,126]),{43:[1,172],80:$VS,81:$VT,82:$VU,85:$VV},{43:[1,173],80:$VS,81:$VT,82:$VU,85:$VV},{22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,41:$Vj,42:$VD,48:174,83:$VE,84:98,86:99,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66},{22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,41:$Vj,42:$VD,48:175,83:$VE,84:98,86:99,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66},{22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,41:$Vj,42:$VD,48:176,83:$VE,84:98,86:99,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66},{22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,41:$Vj,42:$VD,48:177,83:$VE,84:98,86:99,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66},o($VW,[2,97]),{22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,41:$Vj,42:$VD,86:178,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66},{22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,41:$Vj,42:$VD,86:179,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66},{22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,41:$Vj,42:$VD,86:180,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66},{22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,41:$Vj,42:$VD,86:181,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66},{22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,41:$Vj,42:$VD,86:182,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66},{22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,41:$Vj,42:$VD,86:183,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66},o($V31,[2,102]),o($V31,[2,103]),o($V31,[2,104]),o($V31,[2,105]),o($V31,[2,106]),o($V31,[2,107]),{22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,41:$Vj,42:$VD,86:184,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66},o($VP,[2,114]),{43:[1,185],80:$VS,81:$VT,82:$VU,85:$VV},{43:[1,186]},{2:$Vg,9:46,11:187,12:37,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,23:49,24:63,25:64,26:$Vh,27:$Vi,30:[1,188],34:61,36:$V0,37:60,41:$Vj,49:$V1,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:10,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:56,76:65,77:$Vq,78:$Vr,79:$Vs,108:62,109:66},{42:[1,189]},{43:[1,190],80:$VS,81:$VT,82:$VU,85:$VV},{2:$Vg,9:46,12:79,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,23:49,24:63,25:64,26:$Vh,27:$Vi,30:[1,191],34:61,36:$V0,37:60,41:$Vj,49:$V1,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:10,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:56,76:65,77:$Vq,78:$Vr,79:$Vs,108:62,109:66},{72:[1,192]},{43:[1,193],80:$VS,81:$VT,82:$VU,85:$VV},o($VO,[2,132]),{32:[1,195],43:[1,194]},o($V21,[2,131]),{43:[1,196],80:$VS,81:$VT,82:$VU,85:$VV},o($V11,[2,38]),{33:197,34:128,36:$VR,49:$V1,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6},o($V21,[2,33],{39:$Vy}),{35:198,41:$VN},{10:[2,92]},{10:[2,93]},o([10,32,43,65,80,81],[2,94],{82:$VU,85:$VV}),o([10,32,43,65,81],[2,95],{80:$VS,82:$VU,85:$VV}),o([10,32,43,65,80,81,82],[2,96],{85:$VV}),{65:[1,199],80:$VS,81:$VT,82:$VU,85:$VV},o($VW,[2,100],{94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$}),o($V41,[2,108],{96:$VZ,97:$V_,98:$V$}),o($V41,[2,109],{96:$VZ,97:$V_,98:$V$}),o($VP,[2,110]),o($VP,[2,111]),o($VP,[2,112]),{32:[1,200],94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$},o($VP,[2,115]),{22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,41:$Vj,42:$VD,86:201,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66},{2:$Vg,9:46,12:79,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,23:49,24:63,25:64,26:$Vh,27:$Vi,30:[1,202],34:61,36:$V0,37:60,41:$Vj,49:$V1,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:10,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:56,76:65,77:$Vq,78:$Vr,79:$Vs,108:62,109:66},o($Vz,[2,84]),{22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,41:$Vj,42:$VD,48:203,83:$VE,84:98,86:99,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66},{29:[1,204]},{72:[1,205]},{42:[1,206]},{29:[1,207]},o($VO,[2,133]),{22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,41:$Vj,42:$VD,45:208,48:131,83:$VE,84:98,86:99,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66},{29:[1,209]},o($V21,[2,31]),o($V21,[2,34],{39:$Vy}),{22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,41:$Vj,42:$VD,48:210,83:$VE,84:98,86:99,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66},{22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,41:$Vj,42:$VD,86:211,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66},o($VP,[2,118]),o($Vz,[2,83]),{43:[1,212],80:$VS,81:$VT,82:$VU,85:$VV},{2:$Vg,9:46,11:213,12:37,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,23:49,24:63,25:64,26:$Vh,27:$Vi,30:[1,214],34:61,36:$V0,37:60,41:$Vj,49:$V1,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:10,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:56,76:65,77:$Vq,78:$Vr,79:$Vs,108:62,109:66},{42:[1,215]},{22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,41:$Vj,42:$VD,48:216,83:$VE,84:98,86:99,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66},{62:217,63:218,64:$V51,66:219,67:$V61},o($V21,[2,130]),{2:$Vg,9:46,11:223,12:37,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,23:49,24:63,25:64,26:$Vh,27:$Vi,30:[1,222],34:61,36:$V0,37:60,41:$Vj,49:$V1,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:10,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:56,76:65,77:$Vq,78:$Vr,79:$Vs,108:62,109:66},o($VW,[2,99]),{43:[1,224],94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$},{29:[1,225]},{2:$Vg,9:46,12:79,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,23:49,24:63,25:64,26:$Vh,27:$Vi,30:[1,226],34:61,36:$V0,37:60,41:$Vj,49:$V1,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:10,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:56,76:65,77:$Vq,78:$Vr,79:$Vs,108:62,109:66},o($Vz,[2,82]),{22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,41:$Vj,42:$VD,48:227,83:$VE,84:98,86:99,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66},{43:[1,228],80:$VS,81:$VT,82:$VU,85:$VV},{30:[1,229],63:230,64:$V51,66:231,67:$V61},{30:[1,232]},o($V71,[2,71]),{65:[1,233]},{22:104,23:105,24:63,25:64,26:$Vh,27:$Vi,41:$Vj,42:$VD,48:234,83:$VE,84:98,86:99,95:$VF,99:$VG,100:103,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,108:62,109:66},o($VQ,[2,88]),{2:$Vg,9:46,12:79,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,23:49,24:63,25:64,26:$Vh,27:$Vi,30:[1,235],34:61,36:$V0,37:60,41:$Vj,49:$V1,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:10,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:56,76:65,77:$Vq,78:$Vr,79:$Vs,108:62,109:66},o($VP,[2,113]),{2:$Vg,9:46,11:237,12:37,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,23:49,24:63,25:64,26:$Vh,27:$Vi,30:[1,236],34:61,36:$V0,37:60,41:$Vj,49:$V1,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:10,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:56,76:65,77:$Vq,78:$Vr,79:$Vs,108:62,109:66},o($Vz,[2,81]),{43:[1,238],80:$VS,81:$VT,82:$VU,85:$VV},{10:[2,80]},o($Vz,[2,64]),{30:[1,239]},o($V71,[2,70]),o($Vz,[2,66]),{29:[1,240],30:[2,67]},{65:[1,241],80:$VS,81:$VT,82:$VU,85:$VV},o($VQ,[2,89]),o($VQ,[2,90]),{2:$Vg,9:46,12:79,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,23:49,24:63,25:64,26:$Vh,27:$Vi,30:[1,242],34:61,36:$V0,37:60,41:$Vj,49:$V1,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:10,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:56,76:65,77:$Vq,78:$Vr,79:$Vs,108:62,109:66},{10:[2,79]},o($Vz,[2,65]),{2:$Vg,9:46,11:243,12:37,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,23:49,24:63,25:64,26:$Vh,27:$Vi,30:[1,244],34:61,36:$V0,37:60,41:$Vj,49:$V1,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:10,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:56,76:65,77:$Vq,78:$Vr,79:$Vs,108:62,109:66},o($V71,[2,74],{29:[1,245]}),o($VQ,[2,91]),{2:$Vg,9:46,12:79,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,23:49,24:63,25:64,26:$Vh,27:$Vi,30:[1,246],34:61,36:$V0,37:60,41:$Vj,49:$V1,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:10,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:56,76:65,77:$Vq,78:$Vr,79:$Vs,108:62,109:66},{30:[2,69]},{2:$Vg,9:46,11:247,12:37,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,23:49,24:63,25:64,26:$Vh,27:$Vi,30:[1,248],34:61,36:$V0,37:60,41:$Vj,49:$V1,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:10,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:56,76:65,77:$Vq,78:$Vr,79:$Vs,108:62,109:66},{30:[2,68]},{2:$Vg,9:46,12:79,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,23:49,24:63,25:64,26:$Vh,27:$Vi,30:[1,249],34:61,36:$V0,37:60,41:$Vj,49:$V1,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:10,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:56,76:65,77:$Vq,78:$Vr,79:$Vs,108:62,109:66},o($V71,[2,73]),o($V71,[2,72])],
defaultActions: {23:[2,1],53:[2,75],54:[2,76],133:[2,40],172:[2,92],173:[2,93],228:[2,80],238:[2,79],244:[2,69],246:[2,68]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

        const error_manager=require("../../mng_error/error_manager.js");
        const vari = require("../../var.js");
        vari.auxError=new error_manager();
        function ErrorSintactico(a,lin,col){
		    //console.log( "Error Sintactico = " + a+"|"+lin+","+col );
            vari.auxError.addError(a,lin,col,vari.archivo,
            "SINTACTICO");
        }

        function ErrorLexico(a,lin,col){
            
            //console.log( "Error Lexico = " + a +"|"+lin+","+col );
            vari.auxError.addError("caracter inesperado: "+a ,lin,col,vari.archivo,
            "LEXICO");
        }
        const o_postInc = require("../compilador/o_postInc.js");
        const o_preInc = require("../compilador/o_preInc.js");
        const o_postDecr = require("../compilador/o_postDecr.js");
        const o_preDecr = require("../compilador/o_preDecr.js");
         
        const oa_suma = require("../compilador/oa_suma.js");
        const oa_multi = require("../compilador/oa_multi.js");
        const oa_resta = require("../compilador/oa_resta.js");
        const oa_division = require("../compilador/oa_division.js");
        const o_valorPuntual= require("../compilador/o_valorPuntual.js");
        const oa_modular = require("../compilador/oa_modular.js");
        const oa_potencia = require("../compilador/oa_potencia.js");
        const oa_negativo = require("../compilador/oa_negativo.js");
        const oa_casteo= require("../compilador/oa_casteo.js");
        const or_relacional = require("../compilador/or_relacional.js");
        const ol_and=require("../compilador/ol_and.js");
        const ol_not=require("../compilador/ol_not.js");
        const ol_or=require("../compilador/ol_or.js");
        const ol_xor=require("../compilador/ol_xor.js");
        const o_ternario=require("../compilador/o_ternario.js");
        const s_print=require("../compilador/s_print.js");
        const s_println=require("../compilador/s_println.js");
        const s_if=require("../compilador/s_if.js");
        const s_bloque=require("../compilador/s_bloque.js");
        const s_while=require("../compilador/s_while.js");
        const s_do_while=require("../compilador/s_do_while.js");
        const s_retorno=require("../compilador/s_retorno.js");
        const s_retornoEmpty=require("../compilador/s_retornoEmpty.js");
        const s_break=require("../compilador/s_break.js");
        const s_continue=require("../compilador/s_continue.js");
        const s_switch=require("../compilador/s_switch.js");
        const s_decla=require("../compilador/s_decla.js");
        const s_declaracion=require("../compilador/s_declaracion.js");
        const s_asignacion=require("../compilador/s_asignacion.js");
        const s_accesos=require("../compilador/s_accesos.js");
        const s_acVariable=require("../compilador/s_acVariable.js");
        const caso=require("../compilador/caso.js");
        const parametro=require("../../mng_ts/parametro.js");
        const s_metodo=require("../compilador/s_metodo.js");
        const s_llamada=require("../compilador/s_llamada.js");
        //const s_salida=require("../compilador/s_salida.js");
        const tablaTipos = require("../tablaTipos.js");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore comment */
break;
case 1:/* ignore comment */
break;
case 2:return 89;
break;
case 3:return 88;
break;
case 4:return 93;
break;
case 5:return 92;
break;
case 6:return 90;
break;
case 7:return 44;
break;
case 8:return 91;
break;
case 9:return 10;
break;
case 10:return 65;
break;
case 11:return 85;
break;
case 12:return 26;
break;
case 13:return 27;
break;
case 14:return 94;
break;
case 15:return 95;
break;
case 16:return 96;
break;
case 17:return 97;
break;
case 18:return 98;
break;
case 19:return 42;
break;
case 20:return 43;
break;
case 21:return 29;
break;
case 22:return 30;
break;
case 23:return 39;
break;
case 24:return 40;
break;
case 25:return 32;
break;
case 26:return 107;
break;
case 27:return 99;
break;
case 28:return 82;
break;
case 29:return 80;
break;
case 30:return 81;
break;
case 31:return 83;
break;
case 32:return 105;
break;
case 33:return 77;
break;
case 34:return "else_";
break;
case 35:return 106;
break;
case 36:return 78;
break;
case 37:return 79;
break;
case 38:return 72;
break;
case 39:return 68;
break;
case 40:return 69;
break;
case 41:return 70;
break;
case 42:return 61;
break;
case 43:return 67;
break;
case 44:return 64;
break;
case 45:return 71;
break;
case 46:return 49;
break;
case 47:return 51;
break;
case 48:return 50;
break;
case 49:return 52;
break;
case 50:return 53;
break;
case 51:return 54;
break;
case 52:return 57;
break;
case 53:return 56;
break;
case 54:return 58;
break;
case 55:return 59;
break;
case 56:return 36;
break;
case 57:return 60;
break;
case 58:return 104;
break;
case 59:return 103;
break;
case 60:return 101;
break;
case 61:return 102;
break;
case 62:return 41;
break;
case 63: /* skip whitespace */
break;
case 64:
break;
case 65:
break;
case 66:
break;
case 67:
break;
case 68:return 5;
break;
case 69:ErrorLexico(yy_.yytext,yy_.yylineno,yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:(\/\*[^*]*\*\/))/i,/^(?:(\/\/[^\n]+[\n]?))/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:;)/i,/^(?::)/i,/^(?:\?)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:\.)/i,/^(?:pow\b)/i,/^(?:\^)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:true\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:false\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:while\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:do\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:String\b)/i,/^(?:void\b)/i,/^(?:public\b)/i,/^(?:protected\b)/i,/^(?:private\b)/i,/^(?:static\b)/i,/^(?:final\b)/i,/^(?:abstract\b)/i,/^(?:(([0-9]+)[.]([0-9]+)?))/i,/^(?:([0-9]+))/i,/^(?:([\"]([^\"])*[\"]))/i,/^(?:([\']([a-zA-Z]|\\0|\\n|\\t|\\r|\\f)[\']))/i,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/i,/^(?:\s+)/i,/^(?:\n+)/i,/^(?:\r+)/i,/^(?:\t+)/i,/^(?:\f+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}