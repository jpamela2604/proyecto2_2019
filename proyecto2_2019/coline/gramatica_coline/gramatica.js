/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,11],$V2=[1,12],$V3=[1,13],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[1,18],$V9=[1,19],$Va=[1,20],$Vb=[1,22],$Vc=[5,31,44,45,46,47,48,49,51,52,53,54,55],$Vd=[1,33],$Ve=[31,44,45,46,47,48,49,51,52,53,54,55],$Vf=[1,49],$Vg=[1,64],$Vh=[1,58],$Vi=[1,52],$Vj=[1,53],$Vk=[1,54],$Vl=[1,57],$Vm=[1,56],$Vn=[1,65],$Vo=[1,50],$Vp=[1,51],$Vq=[1,68],$Vr=[10,24],$Vs=[1,69],$Vt=[10,27],$Vu=[2,42],$Vv=[1,72],$Vw=[2,25,31,36,44,45,46,47,48,49,51,52,53,54,55,56,63,64,65,66,67,72,73,74],$Vx=[1,84],$Vy=[1,94],$Vz=[1,89],$VA=[1,93],$VB=[1,92],$VC=[1,97],$VD=[1,98],$VE=[1,99],$VF=[1,100],$VG=[1,101],$VH=[1,102],$VI=[1,109],$VJ=[10,27,38,39,60,75,76,77,82,83,84,85,86,87,88,89,90,91,92,101],$VK=[2,25,31,36,44,45,46,47,48,49,51,52,53,54,55,56,63,64,65,66,67,69,72,73,74],$VL=[1,118],$VM=[1,126],$VN=[1,127],$VO=[1,128],$VP=[10,27,38,60,75,76,77],$VQ=[1,131],$VR=[1,132],$VS=[1,133],$VT=[1,134],$VU=[1,135],$VV=[10,27,38,60,75,76,77,82,83,84,85,86,87,88,89,90,91,92],$VW=[10,27,34,38,39],$VX=[10,24,34],$VY=[27,38],$VZ=[10,27,38,60,75,76],$V_=[36,37,89,93,95,96,97,98,99,100],$V$=[10,27,38,60,75,76,77,82,83,84,85,86,87,88,89],$V01=[1,202],$V11=[1,203],$V21=[25,59,62];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"INICIO":3,"S":4,"ENDOFFILE":5,"LISENT":6,"OPCG":7,"DECLAMETO":8,"DECLARACION":9,"ptocoma":10,"L":11,"SENT":12,"IMPRIMIR":13,"S_BREAK":14,"S_CON":15,"S_RETORNO":16,"S_IF":17,"S_WHILE":18,"S_DO":19,"S_SW":20,"ASIGNACION":21,"LAC":22,"CABEZAMET":23,"llava":24,"llavc":25,"PARAMS":26,"coma":27,"PARAM":28,"TIPO":29,"ARRID":30,"ffinal_":31,"MODSCAMPO":32,"DEM":33,"cora":34,"corc":35,"er_id":36,"para":37,"parc":38,"is":39,"INICIALIZA":40,"LDEC":41,"DEC":42,"COND":43,"t_int":44,"t_char":45,"t_double":46,"t_boolean":47,"t_string":48,"vacio":49,"MOC":50,"protegido_":51,"publico_":52,"privado_":53,"estatico_":54,"abstracto_":55,"switch_":56,"LCASOS":57,"DEFECTO":58,"default_":59,"dosptos":60,"CASO":61,"case_":62,"break_":63,"continue_":64,"return_":65,"dow":66,"while_":67,"BS_IF":68,"else_":69,"SINO":70,"SI":71,"if_":72,"print_":73,"println_":74,"and_":75,"or_":76,"xor_":77,"not_":78,"REL":79,"E":80,"OPREL":81,"menori":82,"mayori":83,"igual":84,"dif":85,"menor":86,"mayor":87,"mas":88,"menos":89,"por":90,"divis":91,"modu":92,"potencia":93,"PRIM":94,"er_cadena":95,"er_caracter":96,"er_entero":97,"er_decimal":98,"verdadero":99,"falso":100,"punto":101,"AC":102,"LLAMADA":103,"LCOND":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"ENDOFFILE",10:"ptocoma",24:"llava",25:"llavc",27:"coma",31:"ffinal_",34:"cora",35:"corc",36:"er_id",37:"para",38:"parc",39:"is",44:"t_int",45:"t_char",46:"t_double",47:"t_boolean",48:"t_string",49:"vacio",51:"protegido_",52:"publico_",53:"privado_",54:"estatico_",55:"abstracto_",56:"switch_",59:"default_",60:"dosptos",62:"case_",63:"break_",64:"continue_",65:"return_",66:"dow",67:"while_",69:"else_",72:"if_",73:"print_",74:"println_",75:"and_",76:"or_",77:"xor_",78:"not_",82:"menori",83:"mayori",84:"igual",85:"dif",86:"menor",87:"mayor",88:"mas",89:"menos",90:"por",91:"divis",92:"modu",93:"potencia",95:"er_cadena",96:"er_caracter",97:"er_entero",98:"er_decimal",99:"verdadero",100:"falso",101:"punto"},
productions_: [0,[3,2],[4,1],[6,2],[6,1],[7,1],[7,2],[11,2],[11,1],[12,2],[12,2],[12,2],[12,2],[12,1],[12,1],[12,2],[12,1],[12,2],[12,2],[12,2],[12,2],[8,4],[8,3],[8,2],[26,3],[26,1],[28,2],[28,3],[23,3],[23,2],[33,3],[33,4],[33,3],[21,3],[9,3],[9,2],[41,3],[41,1],[42,3],[42,1],[40,1],[30,3],[30,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[32,2],[32,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[20,7],[20,8],[20,7],[58,2],[58,5],[58,4],[57,2],[57,1],[61,6],[61,5],[61,3],[14,1],[15,1],[16,2],[16,1],[19,8],[19,7],[18,7],[18,6],[17,5],[17,4],[17,1],[68,2],[68,1],[71,6],[71,7],[70,7],[70,8],[13,4],[13,4],[43,3],[43,3],[43,3],[43,2],[43,1],[79,3],[79,1],[81,1],[81,1],[81,1],[81,1],[81,1],[81,1],[80,3],[80,3],[80,3],[80,3],[80,3],[80,6],[80,2],[80,3],[80,1],[80,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[22,3],[22,1],[102,1],[102,1],[104,3],[104,1],[103,3],[103,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

					//typeof console !== 'undefined' ? console.log($$[$0-1]) : print($$[$0-1]);
					//console.log("aceptada");
					return $$[$0-1];
				
break;
case 2: case 5: case 13: case 14: case 16: case 39: case 40: case 91: case 93: case 108: case 118:

                    this.$=$$[$0];
                
break;
case 3: case 49: case 63: case 79:

                    this.$=$$[$0-1];
                    this.$.push($$[$0]);
                
break;
case 4: case 64: case 80: case 117: case 121:

                    this.$=new Array();
                    this.$.push($$[$0]);
                
break;
case 6:

                    this.$=$$[$0-1];
                    this.$.IsGlobal=true;
                
break;
case 7:

                    this.$=$$[$0-1];
                    if($$[$0]!=null)
                    {this.$.push($$[$0]);}
                
break;
case 8:

                    this.$=new Array();
                    if($$[$0]!=null)
                    {this.$.push($$[$0]);}
                
break;
case 9: case 10: case 11: case 12: case 15: case 17: case 18: case 107:

                    this.$=$$[$0-1];
                
break;
case 19:

                    vari.hash++;
                    this.$=new s_accesos($$[$0-1],vari.hash);
                
break;
case 20:

					 ErrorSintactico("falta un punto y coma ",yylineno,0);
                     this.$=null;									
				
break;
case 21:

                    this.$=$$[$0-3];
                    this.$.isAbstract=false;
                    this.$.sentencias=$$[$0-1];
                
break;
case 22:

                    this.$=$$[$0-2];
                    this.$.isAbstract=false;
                    this.$.sentencias=new Array();
                
break;
case 23:

                    this.$=$$[$0-1];
                    this.$.isAbstract=true;
                    this.$.sentencias=null;
                
break;
case 24: case 116:

                    this.$=$$[$0-2];
                    this.$.push($$[$0]);
                
break;
case 25: case 37:

                    this.$=new Array();
                    this.$.push($$[$0]); 
                
break;
case 26:

                    vari.hash++;
                    //(tipo,nombre,valor,isFinal,noDimensiones,linea,columna,archivo,hash)
                    this.$=new parametro($$[$0-1],$$[$0].id,null,false,$$[$0].noDimensiones,$$[$0].linea,$$[$0].columna,
                    $$[$0].archivo,vari.hash);
				
break;
case 27:

                    vari.hash++;
                    //(tipo,nombre,valor,isFinal,noDimensiones,linea,columna,archivo,hash)
                    this.$=new parametro($$[$0-1],$$[$0].id,null,true,$$[$0].noDimensiones,$$[$0].linea,$$[$0].columna,
                    $$[$0].archivo,vari.hash);
				
break;
case 28:

                    $$[$0].tipo=$$[$0-1];
                    $$[$0].modificadores=$$[$0-2];
                    this.$=$$[$0];  
				
break;
case 29:

                    $$[$0].tipo=$$[$0-1];
                    this.$=$$[$0];                    
				
break;
case 30:

                    this.$=$$[$0-2];
                    this.$.noDimensiones++;
				
break;
case 31:

                    vari.hash++;
                    //isAbstract,id,sentencias,parametros,modificadores,tipo,noDimensiones,linea,columna,archivo,hash) 
                    this.$=new s_metodo(null,$$[$0-3],null,$$[$0-1],new Array(),null,0,_$[1].first_line,_$[1].first_column,
                    vari.archivo,vari.hash);
				
break;
case 32:

                    vari.hash++;
                    //isAbstract,id,sentencias,parametros,modificadores,tipo,noDimensiones,linea,columna,archivo,hash) 
                    this.$=new s_metodo(null,$$[$0-2],null,new Array(),new Array(),null,0,_$[1].first_line,_$[1].first_column,
                    vari.archivo,vari.hash);
				
break;
case 33:

                    vari.hash++;
                    var ace=new s_accesos($$[$0-2],vari.hash);
                    vari.hash++;
                    this.$=new s_asignacion(ace,$$[$0],_$[2].first_line,_$[2].first_column,vari.archivo,vari.hash);
                
break;
case 34:

                    vari.hash++;
                    this.$=new s_declaracion($$[$0-2],$$[$0-1],$$[$0],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 35:

                    vari.hash++;
                    this.$=new s_declaracion(new Array(),$$[$0-1],$$[$0],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 36:

                    this.$=$$[$0-2];
                    this.$.push($$[$0-1]);
                
break;
case 38:

                    this.$=$$[$0-2];
                    this.$.valor=$$[$0];
                
break;
case 41:

                    this.$=$$[$0-2];
                    this.$.noDimensiones=this.$.noDimensiones+1;

                
break;
case 42:

                    vari.hash++;
                    this.$=new s_decla($$[$0],0,null,_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 43:

                    this.$=tablaTipos.tipo_entero;
                
break;
case 44:

                    this.$=tablaTipos.tipo_caracter;
                
break;
case 45:

                    this.$=tablaTipos.tipo_doble;
                
break;
case 46:

                    this.$=tablaTipos.tipo_booleano;
                
break;
case 47:

                    this.$=tablaTipos.tipo_cadena;
                
break;
case 48:

                    this.$=tablaTipos.tipo_vacio;
                
break;
case 50:

                    this.$=new Array();
                    this.$.push($$[$0]);   
                
break;
case 51:

                    this.$=tablaTipos.protegido;
                
break;
case 52:

                    this.$=tablaTipos.publico;
                
break;
case 53:

                    this.$=tablaTipos.privado;
                
break;
case 54:

                    this.$=tablaTipos.estatico;
                
break;
case 55:

                    this.$=tablaTipos.ffinal;
                
break;
case 56:

                    this.$=tablaTipos.abstracto;
                
break;
case 57:

                    vari.hash++;
                    this.$=new s_switch($$[$0-4],$$[$0-1],null,_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 58:

                    vari.hash++;
                    this.$=new s_switch($$[$0-5],$$[$0-2],$$[$0-1],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 59:

                    vari.hash++;
                    this.$=new s_switch($$[$0-4],new Array(),$$[$0-1],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 60: case 62:

                    vari.hash++;
                    this.$=new caso(null,new Array(),_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 61:

                    vari.hash++;
                    this.$=new caso(null,$$[$0-1],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 65:

                    vari.hash++;
                    this.$=new caso($$[$0-4],$$[$0-1],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 66:

                    vari.hash++;
                    this.$=new caso($$[$0-3],new Array(),_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 67:

                    vari.hash++;
                    this.$=new caso($$[$0-1],new Array(),_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 68:

                    vari.hash++;
                    this.$=new s_break(_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 69:

                    vari.hash++;
                    this.$=new s_continue(_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 70:

                    vari.hash++;
                    this.$=new s_retorno($$[$0],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 71:

                    vari.hash++;
                    this.$=new s_retornoEmpty(_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 72:

                    vari.hash++;
                    this.$=new s_do_while($$[$0-1],$$[$0-5],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 73:

                    vari.hash++;
                    this.$=new s_do_while($$[$0-1],new Array(),_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 74:

                    vari.hash++;
                    this.$=new s_while($$[$0-4],$$[$0-1],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 75:

                    vari.hash++;
                    this.$=new s_while($$[$0-3],new Array(),_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 76:

                    vari.hash++;
                    var bloque=new s_bloque(null,$$[$0-1],_$[2].first_line,_$[2].first_column,vari.archivo,vari.hash);
                    $$[$0-4].push(bloque);
                    vari.hash++;
                    this.$=new s_if($$[$0-4],vari.hash);
                
break;
case 77:

                    vari.hash++;
                    var bloque=new s_bloque(null,new Array(),_$[2].first_line,_$[2].first_column,vari.archivo,vari.hash);
                    $$[$0-3].push(bloque);
                    vari.hash++;
                    this.$=new s_if($$[$0-3],vari.hash);
                
break;
case 78:

                    vari.hash++;
                    this.$=new s_if($$[$0],vari.hash);
                
break;
case 81: case 83:

                    vari.hash++;
                    this.$=new s_bloque($$[$0-3],new Array(),_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 82: case 84:

                    vari.hash++;
                    this.$=new s_bloque($$[$0-4],$$[$0-1],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 85:

                    vari.hash++;
                    this.$=new s_print($$[$0-1],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 86:

                    vari.hash++;
                    this.$=new s_println($$[$0-1],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 87:

                    vari.hash++;
                    this.$=new ol_and($$[$0-2],$$[$0],_$[2].first_line,_$[2].first_column,vari.archivo,vari.hash);
                
break;
case 88:

                    vari.hash++;
                    this.$=new ol_or($$[$0-2],$$[$0],_$[2].first_line,_$[2].first_column,vari.archivo,vari.hash);
                
break;
case 89:

                    vari.hash++;
                    this.$=new ol_xor($$[$0-2],$$[$0],_$[2].first_line,_$[2].first_column,vari.archivo,vari.hash);
                
break;
case 90:

                    vari.hash++;
                    this.$=new ol_not($$[$0],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 92:

                    vari.hash++;
                    this.$=new or_relacional($$[$0-1],$$[$0-2],$$[$0],_$[2].first_line,_$[2].first_column,vari.archivo,vari.hash);
                
break;
case 94:

                    this.$="<=";
                
break;
case 95:

                    this.$=">=";
                
break;
case 96:

                    this.$="==";
                
break;
case 97:

                    this.$="!=";
                
break;
case 98:

                    this.$="<";
                
break;
case 99:

                    this.$=">";
                
break;
case 100:

                    vari.hash++;
                    this.$=new oa_suma($$[$0-2],$$[$0],_$[2].first_line,_$[2].first_column,vari.archivo,vari.hash);
                
break;
case 101:

                    vari.hash++;
                    this.$=new oa_resta($$[$0-2],$$[$0],_$[2].first_line,_$[2].first_column,vari.archivo,vari.hash);
                
break;
case 102:

                    vari.hash++;
                    this.$=new oa_multi($$[$0-2],$$[$0],_$[2].first_line,_$[2].first_column,vari.archivo,vari.hash);
                
break;
case 103:

                    vari.hash++;
                    this.$=new oa_division($$[$0-2],$$[$0],_$[2].first_line,_$[2].first_column,vari.archivo,vari.hash);
                
break;
case 104:

                    vari.hash++;
                    this.$=new oa_modular($$[$0-2],$$[$0],_$[2].first_line,_$[2].first_column,vari.archivo,vari.hash);
                
break;
case 105:

                    vari.hash++;
                    this.$=new oa_modular($$[$0-3],$$[$0-1],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 106:

                    vari.hash++;
                    this.$=new oa_negativo($$[$0],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 109:

                    vari.hash++;
                    var ace=new s_accesos($$[$0],vari.hash);
                    vari.hash++;
                    this.$=new o_valorPuntual(null,ace,_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);

                
break;
case 110:

                    var a=yytext+"";
                    a=a.substring(1,a.length-1);
                    vari.hash++;
                    this.$=new o_valorPuntual(tablaTipos.tipo_cadena,a,_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 111:

                    var a=yytext+"";
                    a=a.substring(1,a.length-1);
                    //console.log("|"+a+"|");
                    if(a=="\\n")
                    {
                        //console.log("entro");
                        a=10;
                    }else
                    {
                        a=a.charCodeAt();
                    }
                    vari.hash++;
                    this.$=new o_valorPuntual(tablaTipos.tipo_caracter,a,_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 112:

                    vari.hash++;
                    this.$=new o_valorPuntual(tablaTipos.tipo_entero,yytext,_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 113:

                    vari.hash++;
                    this.$=new o_valorPuntual(tablaTipos.tipo_doble,yytext,_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 114:

                    vari.hash++;
                    this.$=new o_valorPuntual(tablaTipos.tipo_booleano,1,_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 115:

                    vari.hash++;
                    this.$=new o_valorPuntual(tablaTipos.tipo_booleano,0,_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 119:

                    vari.hash++;
                    this.$=new s_acVariable(yytext,_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 120:

                    this.$=$$[$0-2];
                    this.$.push($$[$0]);

                
break;
case 122:

                    vari.hash++;
                    this.$=new s_llamada($$[$0-2],new Array(),_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
case 123:

                    vari.hash++;
                    this.$=new s_llamada($$[$0-3],$$[$0-1],_$[1].first_line,_$[1].first_column,vari.archivo,vari.hash);
                
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,23:7,29:9,31:$V0,32:8,44:$V1,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6,50:10,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb},{1:[3]},{5:[1,23]},{5:[2,2],7:24,8:5,9:6,23:7,29:9,31:$V0,32:8,44:$V1,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6,50:10,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb},o($Vc,[2,4]),o($Vc,[2,5]),{10:[1,25]},{10:[1,27],24:[1,26]},{29:28,31:$V0,44:$V1,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6,50:29,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb},{30:34,33:31,36:$Vd,41:30,42:32},o($Ve,[2,50]),{36:[2,43]},{36:[2,44]},{36:[2,45]},{36:[2,46]},{36:[2,47]},{36:[2,48]},o($Ve,[2,51]),o($Ve,[2,52]),o($Ve,[2,53]),o($Ve,[2,54]),o($Ve,[2,55]),o($Ve,[2,56]),{1:[2,1]},o($Vc,[2,3]),o($Vc,[2,6]),{2:$Vf,9:46,11:35,12:37,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,25:[1,36],29:60,31:$V0,32:59,36:$Vg,44:$V1,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6,50:10,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:55,71:62,72:$Vn,73:$Vo,74:$Vp,102:61,103:63},o($Vc,[2,23]),{30:34,33:67,36:$Vd,41:66,42:32},o($Ve,[2,49]),{10:[2,35],27:$Vq},o($Vr,[2,29],{34:$Vs}),o($Vt,[2,37]),o([10,27,34,39],$Vu,{37:[1,70]}),o($Vt,[2,39],{34:$Vv,39:[1,71]}),{2:$Vf,9:46,12:74,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,25:[1,73],29:60,31:$V0,32:59,36:$Vg,44:$V1,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6,50:10,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:55,71:62,72:$Vn,73:$Vo,74:$Vp,102:61,103:63},o($Vc,[2,22]),o($Vw,[2,8]),{10:[1,75]},{10:[1,76]},{10:[1,77]},{10:[1,78]},o($Vw,[2,13]),o($Vw,[2,14]),{10:[1,79]},o($Vw,[2,16]),{10:[1,80]},{10:[1,81]},{10:[1,82],39:[1,83],101:$Vx},{10:[1,85]},{37:[1,86]},{37:[1,87]},{10:[2,68]},{10:[2,69]},{10:[2,71],22:96,36:$Vg,37:$Vy,43:88,78:$Vz,79:90,80:91,89:$VA,93:$VB,94:95,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:61,103:63},o($Vw,[2,78],{70:104,69:[1,103]}),{37:[1,105]},{24:[1,106]},{37:[1,107]},{29:108,31:$V0,44:$V1,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6,50:29,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb},{30:34,36:$VI,41:30,42:32},o($VJ,[2,117]),o($VK,[2,80]),o($VJ,[2,118]),o($VJ,[2,119],{37:[1,110]}),{37:[1,111]},{10:[2,34],27:$Vq},o($Vr,[2,28],{34:$Vs}),{30:34,36:$VI,42:112},{35:[1,113]},{26:114,28:116,29:117,31:$VL,38:[1,115],44:$V1,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6},{22:96,36:$Vg,37:$Vy,40:119,43:120,78:$Vz,79:90,80:91,89:$VA,93:$VB,94:95,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:61,103:63},{35:[1,121]},o($Vc,[2,21]),o($Vw,[2,7]),o($Vw,[2,9]),o($Vw,[2,10]),o($Vw,[2,11]),o($Vw,[2,12]),o($Vw,[2,15]),o($Vw,[2,17]),o($Vw,[2,18]),o($Vw,[2,19]),{22:96,36:$Vg,37:$Vy,40:122,43:120,78:$Vz,79:90,80:91,89:$VA,93:$VB,94:95,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:61,103:63},{36:$Vg,102:123,103:63},o($Vw,[2,20]),{22:96,36:$Vg,37:$Vy,43:124,78:$Vz,79:90,80:91,89:$VA,93:$VB,94:95,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:61,103:63},{22:96,36:$Vg,37:$Vy,43:125,78:$Vz,79:90,80:91,89:$VA,93:$VB,94:95,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:61,103:63},{10:[2,70],75:$VM,76:$VN,77:$VO},{22:96,36:$Vg,37:$Vy,43:129,78:$Vz,79:90,80:91,89:$VA,93:$VB,94:95,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:61,103:63},o($VP,[2,91]),o($VP,[2,93],{81:130,82:[1,136],83:[1,137],84:[1,138],85:[1,139],86:[1,140],87:[1,141],88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU}),{37:[1,142]},{22:96,36:$Vg,37:$Vy,80:143,89:$VA,93:$VB,94:95,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:61,103:63},{22:96,36:$Vg,37:$Vy,43:144,78:$Vz,79:90,80:91,89:$VA,93:$VB,94:95,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:61,103:63},o($VV,[2,108]),o($VV,[2,109],{101:$Vx}),o($VV,[2,110]),o($VV,[2,111]),o($VV,[2,112]),o($VV,[2,113]),o($VV,[2,114]),o($VV,[2,115]),{24:[1,145],72:[1,146]},o($VK,[2,79]),{22:96,36:$Vg,37:$Vy,43:147,78:$Vz,79:90,80:91,89:$VA,93:$VB,94:95,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:61,103:63},{2:$Vf,9:46,11:148,12:37,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,25:[1,149],29:60,31:$V0,32:59,36:$Vg,44:$V1,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6,50:10,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:55,71:62,72:$Vn,73:$Vo,74:$Vp,102:61,103:63},{22:96,36:$Vg,37:$Vy,43:150,78:$Vz,79:90,80:91,89:$VA,93:$VB,94:95,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:61,103:63},{30:34,36:$VI,41:66,42:32},o($VW,$Vu),{22:96,36:$Vg,37:$Vy,38:[1,151],40:153,43:120,78:$Vz,79:90,80:91,89:$VA,93:$VB,94:95,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:61,103:63,104:152},{22:96,36:$Vg,37:$Vy,43:154,78:$Vz,79:90,80:91,89:$VA,93:$VB,94:95,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:61,103:63},o($Vt,[2,36]),o($VX,[2,30]),{27:[1,156],38:[1,155]},o($VX,[2,32]),o($VY,[2,25]),{30:157,36:$VI},{29:158,44:$V1,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6},o($Vt,[2,38]),o([10,27,38],[2,40],{75:$VM,76:$VN,77:$VO}),o($VW,[2,41]),{10:[2,33]},o($VJ,[2,116]),{38:[1,159],75:$VM,76:$VN,77:$VO},{38:[1,160],75:$VM,76:$VN,77:$VO},{22:96,36:$Vg,37:$Vy,43:161,78:$Vz,79:90,80:91,89:$VA,93:$VB,94:95,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:61,103:63},{22:96,36:$Vg,37:$Vy,43:162,78:$Vz,79:90,80:91,89:$VA,93:$VB,94:95,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:61,103:63},{22:96,36:$Vg,37:$Vy,43:163,78:$Vz,79:90,80:91,89:$VA,93:$VB,94:95,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:61,103:63},o($VZ,[2,90],{77:$VO}),{22:96,36:$Vg,37:$Vy,80:164,89:$VA,93:$VB,94:95,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:61,103:63},{22:96,36:$Vg,37:$Vy,80:165,89:$VA,93:$VB,94:95,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:61,103:63},{22:96,36:$Vg,37:$Vy,80:166,89:$VA,93:$VB,94:95,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:61,103:63},{22:96,36:$Vg,37:$Vy,80:167,89:$VA,93:$VB,94:95,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:61,103:63},{22:96,36:$Vg,37:$Vy,80:168,89:$VA,93:$VB,94:95,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:61,103:63},{22:96,36:$Vg,37:$Vy,80:169,89:$VA,93:$VB,94:95,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:61,103:63},o($V_,[2,94]),o($V_,[2,95]),o($V_,[2,96]),o($V_,[2,97]),o($V_,[2,98]),o($V_,[2,99]),{22:96,36:$Vg,37:$Vy,80:170,89:$VA,93:$VB,94:95,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:61,103:63},o($VV,[2,106]),{38:[1,171],75:$VM,76:$VN,77:$VO},{2:$Vf,9:46,11:172,12:37,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,25:[1,173],29:60,31:$V0,32:59,36:$Vg,44:$V1,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6,50:10,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:55,71:62,72:$Vn,73:$Vo,74:$Vp,102:61,103:63},{37:[1,174]},{38:[1,175],75:$VM,76:$VN,77:$VO},{2:$Vf,9:46,12:74,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,25:[1,176],29:60,31:$V0,32:59,36:$Vg,44:$V1,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6,50:10,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:55,71:62,72:$Vn,73:$Vo,74:$Vp,102:61,103:63},{67:[1,177]},{38:[1,178],75:$VM,76:$VN,77:$VO},o($VJ,[2,122]),{27:[1,180],38:[1,179]},o($VY,[2,121]),{38:[1,181],75:$VM,76:$VN,77:$VO},o($VX,[2,31]),{28:182,29:117,31:$VL,44:$V1,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6},o($VY,[2,26],{34:$Vv}),{30:183,36:$VI},{10:[2,85]},{10:[2,86]},o($VZ,[2,87],{77:$VO}),o([10,27,38,60,76],[2,88],{75:$VM,77:$VO}),o($VP,[2,89]),o($VP,[2,92],{88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU}),o($V$,[2,100],{90:$VS,91:$VT,92:$VU}),o($V$,[2,101],{90:$VS,91:$VT,92:$VU}),o($VV,[2,102]),o($VV,[2,103]),o($VV,[2,104]),{27:[1,184],88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU},o($VV,[2,107]),{2:$Vf,9:46,12:74,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,25:[1,185],29:60,31:$V0,32:59,36:$Vg,44:$V1,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6,50:10,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:55,71:62,72:$Vn,73:$Vo,74:$Vp,102:61,103:63},o($Vw,[2,77]),{22:96,36:$Vg,37:$Vy,43:186,78:$Vz,79:90,80:91,89:$VA,93:$VB,94:95,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:61,103:63},{24:[1,187]},{67:[1,188]},{37:[1,189]},{24:[1,190]},o($VJ,[2,123]),{22:96,36:$Vg,37:$Vy,40:191,43:120,78:$Vz,79:90,80:91,89:$VA,93:$VB,94:95,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:61,103:63},{24:[1,192]},o($VY,[2,24]),o($VY,[2,27],{34:$Vv}),{22:96,36:$Vg,37:$Vy,80:193,89:$VA,93:$VB,94:95,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:61,103:63},o($Vw,[2,76]),{38:[1,194],75:$VM,76:$VN,77:$VO},{2:$Vf,9:46,11:195,12:37,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,25:[1,196],29:60,31:$V0,32:59,36:$Vg,44:$V1,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6,50:10,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:55,71:62,72:$Vn,73:$Vo,74:$Vp,102:61,103:63},{37:[1,197]},{22:96,36:$Vg,37:$Vy,43:198,78:$Vz,79:90,80:91,89:$VA,93:$VB,94:95,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:61,103:63},{57:199,58:200,59:$V01,61:201,62:$V11},o($VY,[2,120]),{2:$Vf,9:46,11:205,12:37,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,25:[1,204],29:60,31:$V0,32:59,36:$Vg,44:$V1,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6,50:10,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:55,71:62,72:$Vn,73:$Vo,74:$Vp,102:61,103:63},{38:[1,206],88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU},{24:[1,207]},{2:$Vf,9:46,12:74,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,25:[1,208],29:60,31:$V0,32:59,36:$Vg,44:$V1,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6,50:10,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:55,71:62,72:$Vn,73:$Vo,74:$Vp,102:61,103:63},o($Vw,[2,75]),{22:96,36:$Vg,37:$Vy,43:209,78:$Vz,79:90,80:91,89:$VA,93:$VB,94:95,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:61,103:63},{38:[1,210],75:$VM,76:$VN,77:$VO},{25:[1,211],58:212,59:$V01,61:213,62:$V11},{25:[1,214]},o($V21,[2,64]),{60:[1,215]},{22:96,36:$Vg,37:$Vy,43:216,78:$Vz,79:90,80:91,89:$VA,93:$VB,94:95,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:61,103:63},o($VK,[2,81]),{2:$Vf,9:46,12:74,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,25:[1,217],29:60,31:$V0,32:59,36:$Vg,44:$V1,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6,50:10,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:55,71:62,72:$Vn,73:$Vo,74:$Vp,102:61,103:63},o($VV,[2,105]),{2:$Vf,9:46,11:219,12:37,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,25:[1,218],29:60,31:$V0,32:59,36:$Vg,44:$V1,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6,50:10,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:55,71:62,72:$Vn,73:$Vo,74:$Vp,102:61,103:63},o($Vw,[2,74]),{38:[1,220],75:$VM,76:$VN,77:$VO},{10:[2,73]},o($Vw,[2,57]),{25:[1,221]},o($V21,[2,63]),o($Vw,[2,59]),{24:[1,222],25:[2,60]},{60:[1,223],75:$VM,76:$VN,77:$VO},o($VK,[2,82]),o($VK,[2,83]),{2:$Vf,9:46,12:74,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,25:[1,224],29:60,31:$V0,32:59,36:$Vg,44:$V1,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6,50:10,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:55,71:62,72:$Vn,73:$Vo,74:$Vp,102:61,103:63},{10:[2,72]},o($Vw,[2,58]),{2:$Vf,9:46,11:225,12:37,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,25:[1,226],29:60,31:$V0,32:59,36:$Vg,44:$V1,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6,50:10,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:55,71:62,72:$Vn,73:$Vo,74:$Vp,102:61,103:63},o($V21,[2,67],{24:[1,227]}),o($VK,[2,84]),{2:$Vf,9:46,12:74,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,25:[1,228],29:60,31:$V0,32:59,36:$Vg,44:$V1,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6,50:10,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:55,71:62,72:$Vn,73:$Vo,74:$Vp,102:61,103:63},{25:[2,62]},{2:$Vf,9:46,11:229,12:37,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,25:[1,230],29:60,31:$V0,32:59,36:$Vg,44:$V1,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6,50:10,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:55,71:62,72:$Vn,73:$Vo,74:$Vp,102:61,103:63},{25:[2,61]},{2:$Vf,9:46,12:74,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:47,22:48,25:[1,231],29:60,31:$V0,32:59,36:$Vg,44:$V1,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6,50:10,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:55,71:62,72:$Vn,73:$Vo,74:$Vp,102:61,103:63},o($V21,[2,66]),o($V21,[2,65])],
defaultActions: {11:[2,43],12:[2,44],13:[2,45],14:[2,46],15:[2,47],16:[2,48],23:[2,1],52:[2,68],53:[2,69],122:[2,33],159:[2,85],160:[2,86],210:[2,73],220:[2,72],226:[2,62],228:[2,61]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

        const error_manager=require("../../mng_error/error_manager.js");
        const vari = require("../../var.js");
        vari.auxError=new error_manager();
        function ErrorSintactico(a,lin,col){
		    //console.log( "Error Sintactico = " + a+"|"+lin+","+col );
            vari.auxError.addError(a,lin,col,vari.archivo,
            "SINTACTICO");
        }

        function ErrorLexico(a,lin,col){
            
            //console.log( "Error Lexico = " + a +"|"+lin+","+col );
            vari.auxError.addError("caracter inesperado: "+a ,lin,col,vari.archivo,
            "LEXICO");
        }
        const oa_suma = require("../compilador/oa_suma.js");
        const oa_multi = require("../compilador/oa_multi.js");
        const oa_resta = require("../compilador/oa_resta.js");
        const oa_division = require("../compilador/oa_division.js");
        const o_valorPuntual= require("../compilador/o_valorPuntual.js");
        const oa_modular = require("../compilador/oa_modular.js");
        const oa_potencia = require("../compilador/oa_potencia.js");
        const oa_negativo = require("../compilador/oa_negativo.js");
        const or_relacional = require("../compilador/or_relacional.js");
        const ol_and=require("../compilador/ol_and.js");
        const ol_not=require("../compilador/ol_not.js");
        const ol_or=require("../compilador/ol_or.js");
        const ol_xor=require("../compilador/ol_xor.js");
        const s_print=require("../compilador/s_print.js");
        const s_println=require("../compilador/s_println.js");
        const s_if=require("../compilador/s_if.js");
        const s_bloque=require("../compilador/s_bloque.js");
        const s_while=require("../compilador/s_while.js");
        const s_do_while=require("../compilador/s_do_while.js");
        const s_retorno=require("../compilador/s_retorno.js");
        const s_retornoEmpty=require("../compilador/s_retornoEmpty.js");
        const s_break=require("../compilador/s_break.js");
        const s_continue=require("../compilador/s_continue.js");
        const s_switch=require("../compilador/s_switch.js");
        const s_decla=require("../compilador/s_decla.js");
        const s_declaracion=require("../compilador/s_declaracion.js");
        const s_asignacion=require("../compilador/s_asignacion.js");
        const s_accesos=require("../compilador/s_accesos.js");
        const s_acVariable=require("../compilador/s_acVariable.js");
        const caso=require("../compilador/caso.js");
        const parametro=require("../../mng_ts/parametro.js");
        const s_metodo=require("../compilador/s_metodo.js");
        const s_llamada=require("../compilador/s_llamada.js");
        
        const tablaTipos = require("../tablaTipos.js");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore comment */
break;
case 1:/* ignore comment */
break;
case 2:return 83;
break;
case 3:return 82;
break;
case 4:return 87;
break;
case 5:return 86;
break;
case 6:return 84;
break;
case 7:return 39;
break;
case 8:return 85;
break;
case 9:return 10;
break;
case 10:return 60;
break;
case 11:return 88;
break;
case 12:return 89;
break;
case 13:return 90;
break;
case 14:return 91;
break;
case 15:return 92;
break;
case 16:return 37;
break;
case 17:return 38;
break;
case 18:return 24;
break;
case 19:return 25;
break;
case 20:return 34;
break;
case 21:return 35;
break;
case 22:return 27;
break;
case 23:return 101;
break;
case 24:return 93;
break;
case 25:return 77;
break;
case 26:return 75;
break;
case 27:return 76;
break;
case 28:return 78;
break;
case 29:return 99;
break;
case 30:return 72;
break;
case 31:return "else_";
break;
case 32:return 100;
break;
case 33:return 73;
break;
case 34:return 74;
break;
case 35:return 67;
break;
case 36:return 63;
break;
case 37:return 64;
break;
case 38:return 65;
break;
case 39:return 56;
break;
case 40:return 62;
break;
case 41:return 59;
break;
case 42:return 66;
break;
case 43:return 44;
break;
case 44:return 46;
break;
case 45:return 45;
break;
case 46:return 47;
break;
case 47:return 48;
break;
case 48:return 49;
break;
case 49:return 52;
break;
case 50:return 51;
break;
case 51:return 53;
break;
case 52:return 54;
break;
case 53:return 31;
break;
case 54:return 55;
break;
case 55:return 98;
break;
case 56:return 97;
break;
case 57:return 95;
break;
case 58:return 96;
break;
case 59:return 36;
break;
case 60: /* skip whitespace */
break;
case 61:
break;
case 62:
break;
case 63:
break;
case 64:
break;
case 65:return 5;
break;
case 66:ErrorLexico(yy_.yytext,yy_.yylineno,yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:(\/\*[^*]*\*\/))/i,/^(?:(\/\/[^\n']+[\n]?))/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:;)/i,/^(?::)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:\.)/i,/^(?:pow\b)/i,/^(?:\^)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:true\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:false\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:while\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:do\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:String\b)/i,/^(?:void\b)/i,/^(?:public\b)/i,/^(?:protected\b)/i,/^(?:private\b)/i,/^(?:static\b)/i,/^(?:final\b)/i,/^(?:abstract\b)/i,/^(?:(([0-9]+)[.]([0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:([\"]([^\"])*[\"]))/i,/^(?:([\']([a-zA-Z]|\\0|\\n|\\t|\\r|\\f)[\']))/i,/^(?:([a-zA-Z][a-zA-Z0-9_]*))/i,/^(?:\s+)/i,/^(?:\n+)/i,/^(?:\r+)/i,/^(?:\t+)/i,/^(?:\f+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}