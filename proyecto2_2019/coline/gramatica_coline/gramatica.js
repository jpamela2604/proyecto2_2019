/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,11],$V2=[1,12],$V3=[1,13],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[1,18],$V9=[1,19],$Va=[1,20],$Vb=[1,22],$Vc=[5,37,50,51,52,53,54,55,57,58,59,60,61],$Vd=[1,33],$Ve=[37,50,51,52,53,54,55,57,58,59,60,61],$Vf=[42,44],$Vg=[1,51],$Vh=[1,70],$Vi=[1,71],$Vj=[1,69],$Vk=[1,61],$Vl=[1,54],$Vm=[1,55],$Vn=[1,56],$Vo=[1,60],$Vp=[1,58],$Vq=[1,59],$Vr=[1,72],$Vs=[1,52],$Vt=[1,53],$Vu=[1,75],$Vv=[10,30],$Vw=[1,76],$Vx=[10,33],$Vy=[2,50],$Vz=[1,79],$VA=[2,27,28,31,37,42,50,51,52,53,54,55,57,58,59,60,61,62,69,70,71,72,73,74,81,82,83],$VB=[1,92],$VC=[1,93],$VD=[1,90],$VE=[1,91],$VF=[1,104],$VG=[1,99],$VH=[1,103],$VI=[1,102],$VJ=[1,108],$VK=[1,109],$VL=[1,110],$VM=[1,111],$VN=[1,112],$VO=[1,113],$VP=[1,114],$VQ=[1,122],$VR=[10,27,28,33,44,45,66,84,85,86,89,92,93,94,95,96,97,98,99,100,101,102,112],$VS=[10,33,44,66,84,85,86,89,92,93,94,95,96,97,98,99,100,101,102],$VT=[2,27,28,31,37,42,50,51,52,53,54,55,57,58,59,60,61,62,69,70,71,72,73,74,78,81,82,83],$VU=[1,133],$VV=[1,141],$VW=[1,142],$VX=[1,143],$VY=[1,144],$VZ=[10,33,44,66,84,85,86,89],$V_=[1,147],$V$=[1,148],$V01=[1,149],$V11=[1,150],$V21=[1,151],$V31=[10,33,40,44,45],$V41=[10,30,40],$V51=[33,44],$V61=[27,28,42,43,99,103,105,106,107,108,109,110,111],$V71=[10,33,44,66,84,85,86,89,92,93,94,95,96,97,98,99],$V81=[1,231],$V91=[1,232],$Va1=[31,65,68];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"INICIO":3,"S":4,"ENDOFFILE":5,"LISENT":6,"OPCG":7,"DECLAMETO":8,"DECLARACION":9,"ptocoma":10,"L":11,"SENT":12,"IMPRIMIR":13,"S_BREAK":14,"S_CON":15,"S_RETORNO":16,"S_IF":17,"S_WHILE":18,"S_FOR":19,"S_DO":20,"S_SW":21,"ASIGNACION":22,"LAC":23,"UNAR":24,"PREFIJO":25,"POSTFIJO":26,"incr":27,"decr":28,"CABEZAMET":29,"llava":30,"llavc":31,"PARAMS":32,"coma":33,"PARAM":34,"TIPO":35,"ARRID":36,"ffinal_":37,"MODSCAMPO":38,"DEM":39,"cora":40,"corc":41,"er_id":42,"para":43,"parc":44,"is":45,"INICIALIZA":46,"LDEC":47,"DEC":48,"COND":49,"t_int":50,"t_char":51,"t_double":52,"t_boolean":53,"t_string":54,"vacio":55,"MOC":56,"protegido_":57,"publico_":58,"privado_":59,"estatico_":60,"abstracto_":61,"switch_":62,"LCASOS":63,"DEFECTO":64,"default_":65,"dosptos":66,"CASO":67,"case_":68,"break_":69,"continue_":70,"return_":71,"dow":72,"while_":73,"for_":74,"FINICIO":75,"FACTUAL":76,"BS_IF":77,"else_":78,"SINO":79,"SI":80,"if_":81,"print_":82,"println_":83,"and_":84,"or_":85,"xor_":86,"not_":87,"REL":88,"ques":89,"E":90,"OPREL":91,"menori":92,"mayori":93,"igual":94,"dif":95,"menor":96,"mayor":97,"mas":98,"menos":99,"por":100,"divis":101,"modu":102,"potencia":103,"PRIM":104,"er_cadena":105,"er_caracter":106,"er_entero":107,"er_decimal":108,"verdadero":109,"falso":110,"nulo":111,"punto":112,"AC":113,"LLAMADA":114,"LCOND":115,"$accept":0,"$end":1},
terminals_: {2:"error",5:"ENDOFFILE",10:"ptocoma",27:"incr",28:"decr",30:"llava",31:"llavc",33:"coma",37:"ffinal_",40:"cora",41:"corc",42:"er_id",43:"para",44:"parc",45:"is",50:"t_int",51:"t_char",52:"t_double",53:"t_boolean",54:"t_string",55:"vacio",57:"protegido_",58:"publico_",59:"privado_",60:"estatico_",61:"abstracto_",62:"switch_",65:"default_",66:"dosptos",68:"case_",69:"break_",70:"continue_",71:"return_",72:"dow",73:"while_",74:"for_",78:"else_",81:"if_",82:"print_",83:"println_",84:"and_",85:"or_",86:"xor_",87:"not_",89:"ques",92:"menori",93:"mayori",94:"igual",95:"dif",96:"menor",97:"mayor",98:"mas",99:"menos",100:"por",101:"divis",102:"modu",103:"potencia",105:"er_cadena",106:"er_caracter",107:"er_entero",108:"er_decimal",109:"verdadero",110:"falso",111:"nulo",112:"punto"},
productions_: [0,[3,2],[4,1],[6,2],[6,1],[7,1],[7,2],[11,2],[11,1],[12,2],[12,2],[12,2],[12,2],[12,1],[12,1],[12,1],[12,2],[12,1],[12,2],[12,2],[12,2],[12,2],[12,2],[24,1],[24,1],[25,2],[25,2],[26,2],[26,2],[8,4],[8,3],[8,2],[32,3],[32,1],[34,2],[34,3],[29,3],[29,2],[39,3],[39,4],[39,3],[22,3],[9,3],[9,2],[47,3],[47,1],[48,3],[48,1],[46,1],[36,3],[36,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[38,2],[38,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[21,7],[21,8],[21,7],[64,2],[64,5],[64,4],[63,2],[63,1],[67,6],[67,5],[67,3],[14,1],[15,1],[16,2],[16,1],[20,8],[20,7],[19,10],[19,11],[75,1],[75,1],[76,1],[76,1],[18,7],[18,6],[17,5],[17,4],[17,1],[77,2],[77,1],[80,6],[80,7],[79,7],[79,8],[13,4],[13,4],[49,3],[49,3],[49,3],[49,2],[49,1],[49,5],[88,3],[88,1],[91,1],[91,1],[91,1],[91,1],[91,1],[91,1],[90,3],[90,3],[90,3],[90,3],[90,3],[90,6],[90,2],[90,3],[90,1],[90,1],[90,4],[90,1],[104,1],[104,1],[104,1],[104,1],[104,1],[104,1],[104,1],[23,3],[23,1],[113,1],[113,1],[115,3],[115,1],[114,3],[114,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

					//typeof console !== 'undefined' ? console.log($$[$0-1]) : print($$[$0-1]);
					//console.log("aceptada");
					return $$[$0-1];
				
break;
case 2: case 5: case 13: case 14: case 15: case 17: case 23: case 24: case 47: case 48: case 84: case 85: case 86: case 87: case 105: case 108: case 123: case 126: case 136:

                    this.$=$$[$0];
                
break;
case 3: case 57: case 71: case 93:

                    this.$=$$[$0-1];
                    this.$.push($$[$0]);
                
break;
case 4: case 72: case 94: case 135: case 139:

                    this.$=new Array();
                    this.$.push($$[$0]);
                
break;
case 6:

                    this.$=$$[$0-1];
                    this.$.IsGlobal=true;
                
break;
case 7:

                    this.$=$$[$0-1];
                    if($$[$0]!=null)
                    {this.$.push($$[$0]);}
                
break;
case 8:

                    this.$=new Array();
                    if($$[$0]!=null)
                    {this.$.push($$[$0]);}
                
break;
case 9: case 10: case 11: case 12: case 16: case 18: case 19: case 21: case 122:

                    this.$=$$[$0-1];
                
break;
case 20:

                    vari.hash++;
                    this.$=new s_accesos($$[$0-1],vari.hash);
                
break;
case 22:

					 ErrorSintactico("falta un punto y coma ",yylineno,0);
                     this.$=null;									
				
break;
case 25:

                    vari.hash++;
                    var aco=new s_accesos($$[$0],vari.hash);
                    vari.hash++;
                    this.$=new  o_preInc(aco,_$[$0-1].first_line,_$[$0-1].first_column,vari.archivo,vari.hash);  
                
break;
case 26:

                    vari.hash++;
                    var aco=new s_accesos($$[$0],vari.hash);
                    vari.hash++;
                    this.$=new o_preDecr(aco,_$[$0-1].first_line,_$[$0-1].first_column,vari.archivo,vari.hash);
                
break;
case 27:

                    vari.hash++;
                    var aco=new s_accesos($$[$0-1],vari.hash);
                    vari.hash++;
                    this.$=new o_postInc(aco,_$[$0].first_line,_$[$0].first_column,vari.archivo,vari.hash);
                
break;
case 28:

                    vari.hash++;
                    var aco=new s_accesos($$[$0-1],vari.hash);
                    vari.hash++;
                    this.$=new o_postDecr(aco,_$[$0].first_line,_$[$0].first_column,vari.archivo,vari.hash);
                
break;
case 29:

                    this.$=$$[$0-3];
                    this.$.isAbstract=false;
                    this.$.sentencias=$$[$0-1];
                
break;
case 30:

                    this.$=$$[$0-2];
                    this.$.isAbstract=false;
                    this.$.sentencias=new Array();
                
break;
case 31:

                    this.$=$$[$0-1];
                    this.$.isAbstract=true;
                    this.$.sentencias=null;
                
break;
case 32: case 134:

                    this.$=$$[$0-2];
                    this.$.push($$[$0]);
                
break;
case 33: case 45:

                    this.$=new Array();
                    this.$.push($$[$0]); 
                
break;
case 34:

                    vari.hash++;
                    //(tipo,nombre,valor,isFinal,noDimensiones,linea,columna,archivo,hash)
                    this.$=new parametro($$[$0-1],$$[$0].id,null,false,$$[$0].noDimensiones,$$[$0].linea,$$[$0].columna,
                    $$[$0].archivo,vari.hash);
				
break;
case 35:

                    vari.hash++;
                    //(tipo,nombre,valor,isFinal,noDimensiones,linea,columna,archivo,hash)
                    this.$=new parametro($$[$0-1],$$[$0].id,null,true,$$[$0].noDimensiones,$$[$0].linea,$$[$0].columna,
                    $$[$0].archivo,vari.hash);
				
break;
case 36:

                    $$[$0].tipo=$$[$0-1];
                    $$[$0].modificadores=$$[$0-2];
                    this.$=$$[$0];  
				
break;
case 37:

                    $$[$0].tipo=$$[$0-1];
                    this.$=$$[$0];                    
				
break;
case 38:

                    this.$=$$[$0-2];
                    this.$.noDimensiones++;
				
break;
case 39:

                    vari.hash++;
                    //isAbstract,id,sentencias,parametros,modificadores,tipo,noDimensiones,linea,columna,archivo,hash) 
                    this.$=new s_metodo(null,$$[$0-3],null,$$[$0-1],new Array(),null,0,_$[$0-3].first_line,_$[$0-3].first_column,
                    vari.archivo,vari.hash);
				
break;
case 40:

                    vari.hash++;
                    //isAbstract,id,sentencias,parametros,modificadores,tipo,noDimensiones,linea,columna,archivo,hash) 
                    this.$=new s_metodo(null,$$[$0-2],null,new Array(),new Array(),null,0,_$[$0-2].first_line,_$[$0-2].first_column,
                    vari.archivo,vari.hash);
				
break;
case 41:

                    vari.hash++;
                    var ace=new s_accesos($$[$0-2],vari.hash);
                    vari.hash++;
                    this.$=new s_asignacion(ace,$$[$0],_$[$0-1].first_line,_$[$0-1].first_column,vari.archivo,vari.hash);
                
break;
case 42:

                    vari.hash++;
                    this.$=new s_declaracion($$[$0-2],$$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,vari.archivo,vari.hash);
                
break;
case 43:

                    vari.hash++;
                    this.$=new s_declaracion(new Array(),$$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column,vari.archivo,vari.hash);
                
break;
case 44:

                    this.$=$$[$0-2];
                    this.$.push($$[$0-1]);
                
break;
case 46:

                    this.$=$$[$0-2];
                    this.$.valor=$$[$0];
                
break;
case 49:

                    this.$=$$[$0-2];
                    this.$.noDimensiones=this.$.noDimensiones+1;

                
break;
case 50:

                    vari.hash++;
                    this.$=new s_decla($$[$0],0,null,_$[$0].first_line,_$[$0].first_column,vari.archivo,vari.hash);
                
break;
case 51:

                    this.$=tablaTipos.tipo_entero;
                
break;
case 52:

                    this.$=tablaTipos.tipo_caracter;
                
break;
case 53:

                    this.$=tablaTipos.tipo_doble;
                
break;
case 54:

                    this.$=tablaTipos.tipo_booleano;
                
break;
case 55:

                    this.$=tablaTipos.tipo_cadena;
                
break;
case 56:

                    this.$=tablaTipos.tipo_vacio;
                
break;
case 58:

                    this.$=new Array();
                    this.$.push($$[$0]);   
                
break;
case 59:

                    this.$=tablaTipos.protegido;
                
break;
case 60:

                    this.$=tablaTipos.publico;
                
break;
case 61:

                    this.$=tablaTipos.privado;
                
break;
case 62:

                    this.$=tablaTipos.estatico;
                
break;
case 63:

                    this.$=tablaTipos.ffinal;
                
break;
case 64:

                    this.$=tablaTipos.abstracto;
                
break;
case 65:

                    vari.hash++;
                    this.$=new s_switch($$[$0-4],$$[$0-1],null,_$[$0-6].first_line,_$[$0-6].first_column,vari.archivo,vari.hash);
                
break;
case 66:

                    vari.hash++;
                    this.$=new s_switch($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column,vari.archivo,vari.hash);
                
break;
case 67:

                    vari.hash++;
                    this.$=new s_switch($$[$0-4],new Array(),$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column,vari.archivo,vari.hash);
                
break;
case 68:

                    vari.hash++;
                    this.$=new caso(null,new Array(),_$[$0-1].first_line,_$[$0-1].first_column,vari.archivo,vari.hash);
                
break;
case 69:

                    vari.hash++;
                    this.$=new caso(null,$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column,vari.archivo,vari.hash);
                
break;
case 70:

                    vari.hash++;
                    this.$=new caso(null,new Array(),_$[$0-3].first_line,_$[$0-3].first_column,vari.archivo,vari.hash);
                
break;
case 73:

                    vari.hash++;
                    this.$=new caso($$[$0-4],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column,vari.archivo,vari.hash);
                
break;
case 74:

                    vari.hash++;
                    this.$=new caso($$[$0-3],new Array(),_$[$0-4].first_line,_$[$0-4].first_column,vari.archivo,vari.hash);
                
break;
case 75:

                    vari.hash++;
                    this.$=new caso($$[$0-1],new Array(),_$[$0-2].first_line,_$[$0-2].first_column,vari.archivo,vari.hash);
                
break;
case 76:

                    vari.hash++;
                    this.$=new s_break(_$[$0].first_line,_$[$0].first_column,vari.archivo,vari.hash);
                
break;
case 77:

                    vari.hash++;
                    this.$=new s_continue(_$[$0].first_line,_$[$0].first_column,vari.archivo,vari.hash);
                
break;
case 78:

                    vari.hash++;
                    this.$=new s_retorno($$[$0],_$[$0-1].first_line,_$[$0-1].first_column,vari.archivo,vari.hash);
                
break;
case 79:

                    vari.hash++;
                    this.$=new s_retornoEmpty(_$[$0].first_line,_$[$0].first_column,vari.archivo,vari.hash);
                
break;
case 80:

                    vari.hash++;
                    this.$=new s_do_while($$[$0-1],$$[$0-5],_$[$0-7].first_line,_$[$0-7].first_column,vari.archivo,vari.hash);
                
break;
case 81:

                    vari.hash++;
                    this.$=new s_do_while($$[$0-1],new Array(),_$[$0-6].first_line,_$[$0-6].first_column,vari.archivo,vari.hash);
                
break;
case 82:

                    vari.hash++;
                    this.$=new s_for($$[$0-7],$$[$0-5],$$[$0-3],new Array(),_$[$0-9].first_line,_$[$0-9].first_column,vari.archivo,vari.hash);
                
break;
case 83:

                    vari.hash++;
                    this.$=new s_for($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line,_$[$0-10].first_column,vari.archivo,vari.hash);
                
break;
case 88:

                    vari.hash++;
                    this.$=new s_while($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column,vari.archivo,vari.hash);
                
break;
case 89:

                    vari.hash++;
                    this.$=new s_while($$[$0-3],new Array(),_$[$0-5].first_line,_$[$0-5].first_column,vari.archivo,vari.hash);
                
break;
case 90:

                    vari.hash++;
                    var bloque=new s_bloque(null,$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column,vari.archivo,vari.hash);
                    $$[$0-4].push(bloque);
                    vari.hash++;
                    this.$=new s_if($$[$0-4],vari.hash);
                
break;
case 91:

                    vari.hash++;
                    var bloque=new s_bloque(null,new Array(),_$[$0-2].first_line,_$[$0-2].first_column,vari.archivo,vari.hash);
                    $$[$0-3].push(bloque);
                    vari.hash++;
                    this.$=new s_if($$[$0-3],vari.hash);
                
break;
case 92:

                    vari.hash++;
                    this.$=new s_if($$[$0],vari.hash);
                
break;
case 95:

                    vari.hash++;
                    this.$=new s_bloque($$[$0-3],new Array(),_$[$0-5].first_line,_$[$0-5].first_column,vari.archivo,vari.hash);
                
break;
case 96:

                    vari.hash++;
                    this.$=new s_bloque($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column,vari.archivo,vari.hash);
                
break;
case 97:

                    vari.hash++;
                    this.$=new s_bloque($$[$0-3],new Array(),_$[$0-6].first_line,_$[$0-6].first_column,vari.archivo,vari.hash);
                
break;
case 98:

                    vari.hash++;
                    this.$=new s_bloque($$[$0-4],$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column,vari.archivo,vari.hash);
                
break;
case 99:

                    vari.hash++;
                    this.$=new s_print($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column,vari.archivo,vari.hash);
                
break;
case 100:

                    vari.hash++;
                    this.$=new s_println($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column,vari.archivo,vari.hash);
                
break;
case 101:

                    vari.hash++;
                    this.$=new ol_and($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column,vari.archivo,vari.hash);
                
break;
case 102:

                    vari.hash++;
                    this.$=new ol_or($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column,vari.archivo,vari.hash);
                
break;
case 103:

                    vari.hash++;
                    this.$=new ol_xor($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column,vari.archivo,vari.hash);
                
break;
case 104:

                    vari.hash++;
                    this.$=new ol_not($$[$0],_$[$0-1].first_line,_$[$0-1].first_column,vari.archivo,vari.hash);
                
break;
case 106:

                    vari.hash++;
                    this.$=new o_ternario($$[$0-4],$$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column,vari.archivo,vari.hash);
                
break;
case 107:

                    vari.hash++;
                    this.$=new or_relacional($$[$0-1],$$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column,vari.archivo,vari.hash);
                
break;
case 109:

                    this.$="<=";
                
break;
case 110:

                    this.$=">=";
                
break;
case 111:

                    this.$="==";
                
break;
case 112:

                    this.$="!=";
                
break;
case 113:

                    this.$="<";
                
break;
case 114:

                    this.$=">";
                
break;
case 115:

                    vari.hash++;
                    this.$=new oa_suma($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column,vari.archivo,vari.hash);
                
break;
case 116:

                    vari.hash++;
                    this.$=new oa_resta($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column,vari.archivo,vari.hash);
                
break;
case 117:

                    vari.hash++;
                    this.$=new oa_multi($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column,vari.archivo,vari.hash);
                
break;
case 118:

                    vari.hash++;
                    this.$=new oa_division($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column,vari.archivo,vari.hash);
                
break;
case 119:

                    vari.hash++;
                    this.$=new oa_modular($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column,vari.archivo,vari.hash);
                
break;
case 120:

                    vari.hash++;
                    this.$=new oa_potencia($$[$0-3],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column,vari.archivo,vari.hash);
                
break;
case 121:

                    vari.hash++;
                    this.$=new oa_negativo($$[$0],_$[$0-1].first_line,_$[$0-1].first_column,vari.archivo,vari.hash);
                
break;
case 124:

                    vari.hash++;
                    var ace=new s_accesos($$[$0],vari.hash);
                    vari.hash++;
                    this.$=new o_valorPuntual(null,ace,_$[$0].first_line,_$[$0].first_column,vari.archivo,vari.hash);

                
break;
case 125:

                    vari.hash++;
                    this.$=new oa_casteo($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column,vari.archivo,vari.hash);
                
break;
case 127:

                    var a=yytext+"";
                    a=a.substring(1,a.length-1);
                    vari.hash++;
                    this.$=new o_valorPuntual(tablaTipos.tipo_cadena,a,_$[$0].first_line,_$[$0].first_column,vari.archivo,vari.hash);
                
break;
case 128:

                    var a=yytext+"";
                    a=a.substring(1,a.length-1);
                    //console.log("|"+a+"|");
                    if(a=="\\n")
                    {
                        //console.log("entro");
                        a=10;
                    }else
                    {
                        a=a.charCodeAt();
                    }
                    vari.hash++;
                    this.$=new o_valorPuntual(tablaTipos.tipo_caracter,a,_$[$0].first_line,_$[$0].first_column,vari.archivo,vari.hash);
                
break;
case 129:

                    vari.hash++;
                    this.$=new o_valorPuntual(tablaTipos.tipo_entero,yytext,_$[$0].first_line,_$[$0].first_column,vari.archivo,vari.hash);
                
break;
case 130:

                    vari.hash++;
                    this.$=new o_valorPuntual(tablaTipos.tipo_doble,yytext,_$[$0].first_line,_$[$0].first_column,vari.archivo,vari.hash);
                
break;
case 131:

                    vari.hash++;
                    this.$=new o_valorPuntual(tablaTipos.tipo_booleano,1,_$[$0].first_line,_$[$0].first_column,vari.archivo,vari.hash);
                
break;
case 132:

                    vari.hash++;
                    this.$=new o_valorPuntual(tablaTipos.tipo_booleano,0,_$[$0].first_line,_$[$0].first_column,vari.archivo,vari.hash);
                
break;
case 133:

                    vari.hash++;
                    this.$=new o_valorPuntual(tablaTipos.tipo_nulo,null,_$[$0].first_line,_$[$0].first_column,vari.archivo,vari.hash);
                
break;
case 137:

                    vari.hash++;
                    this.$=new s_acVariable(yytext,_$[$0].first_line,_$[$0].first_column,vari.archivo,vari.hash);
                
break;
case 138:

                    this.$=$$[$0-2];
                    this.$.push($$[$0]);

                
break;
case 140:

                    vari.hash++;
                    this.$=new s_llamada($$[$0-2],new Array(),_$[$0-2].first_line,_$[$0-2].first_column,vari.archivo,vari.hash);
                
break;
case 141:

                    vari.hash++;
                    this.$=new s_llamada($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column,vari.archivo,vari.hash);
                
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,29:7,35:9,37:$V0,38:8,50:$V1,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6,56:10,57:$V7,58:$V8,59:$V9,60:$Va,61:$Vb},{1:[3]},{5:[1,23]},{5:[2,2],7:24,8:5,9:6,29:7,35:9,37:$V0,38:8,50:$V1,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6,56:10,57:$V7,58:$V8,59:$V9,60:$Va,61:$Vb},o($Vc,[2,4]),o($Vc,[2,5]),{10:[1,25]},{10:[1,27],30:[1,26]},{35:28,37:$V0,50:$V1,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6,56:29,57:$V7,58:$V8,59:$V9,60:$Va,61:$Vb},{36:34,39:31,42:$Vd,47:30,48:32},o($Ve,[2,58]),o($Vf,[2,51]),o($Vf,[2,52]),o($Vf,[2,53]),o($Vf,[2,54]),o($Vf,[2,55]),o($Vf,[2,56]),o($Ve,[2,59]),o($Ve,[2,60]),o($Ve,[2,61]),o($Ve,[2,62]),o($Ve,[2,63]),o($Ve,[2,64]),{1:[2,1]},o($Vc,[2,3]),o($Vc,[2,6]),{2:$Vg,9:47,11:35,12:37,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:46,22:48,23:49,24:50,25:65,26:66,27:$Vh,28:$Vi,31:[1,36],35:63,37:$V0,38:62,42:$Vj,50:$V1,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6,56:10,57:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,77:57,80:67,81:$Vr,82:$Vs,83:$Vt,113:64,114:68},o($Vc,[2,31]),{36:34,39:74,42:$Vd,47:73,48:32},o($Ve,[2,57]),{10:[2,43],33:$Vu},o($Vv,[2,37],{40:$Vw}),o($Vx,[2,45]),o([10,33,40,45],$Vy,{43:[1,77]}),o($Vx,[2,47],{40:$Vz,45:[1,78]}),{2:$Vg,9:47,12:81,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:46,22:48,23:49,24:50,25:65,26:66,27:$Vh,28:$Vi,31:[1,80],35:63,37:$V0,38:62,42:$Vj,50:$V1,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6,56:10,57:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,77:57,80:67,81:$Vr,82:$Vs,83:$Vt,113:64,114:68},o($Vc,[2,30]),o($VA,[2,8]),{10:[1,82]},{10:[1,83]},{10:[1,84]},{10:[1,85]},o($VA,[2,13]),o($VA,[2,14]),o($VA,[2,15]),{10:[1,86]},o($VA,[2,17]),{10:[1,87]},{10:[1,88]},{10:[1,89],27:$VB,28:$VC,45:$VD,112:$VE},{10:[1,94]},{10:[1,95]},{43:[1,96]},{43:[1,97]},{10:[2,76]},{10:[2,77]},{10:[2,79],23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,49:98,87:$VG,88:100,90:101,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},o($VA,[2,92],{79:116,78:[1,115]}),{43:[1,117]},{43:[1,118]},{30:[1,119]},{43:[1,120]},{35:121,37:$V0,50:$V1,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6,56:29,57:$V7,58:$V8,59:$V9,60:$Va,61:$Vb},{36:34,42:$VQ,47:30,48:32},o($VR,[2,135]),o($VS,[2,23]),o($VS,[2,24]),o($VT,[2,94]),o($VR,[2,136]),o($VR,[2,137],{43:[1,123]}),{23:124,42:$Vj,113:64,114:68},{23:125,42:$Vj,113:64,114:68},{43:[1,126]},{10:[2,42],33:$Vu},o($Vv,[2,36],{40:$Vw}),{36:34,42:$VQ,48:127},{41:[1,128]},{32:129,34:131,35:132,37:$VU,44:[1,130],50:$V1,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6},{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,46:134,49:135,87:$VG,88:100,90:101,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},{41:[1,136]},o($Vc,[2,29]),o($VA,[2,7]),o($VA,[2,9]),o($VA,[2,10]),o($VA,[2,11]),o($VA,[2,12]),o($VA,[2,16]),o($VA,[2,18]),o($VA,[2,19]),o($VA,[2,20]),{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,46:137,49:135,87:$VG,88:100,90:101,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},{42:$Vj,113:138,114:68},o($VS,[2,27]),o($VS,[2,28]),o($VA,[2,21]),o($VA,[2,22]),{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,49:139,87:$VG,88:100,90:101,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,49:140,87:$VG,88:100,90:101,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},{10:[2,78],84:$VV,85:$VW,86:$VX,89:$VY},{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,49:145,87:$VG,88:100,90:101,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},o($VZ,[2,105]),o($VZ,[2,108],{91:146,92:[1,152],93:[1,153],94:[1,154],95:[1,155],96:[1,156],97:[1,157],98:$V_,99:$V$,100:$V01,101:$V11,102:$V21}),{43:[1,158]},{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,90:159,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,35:161,42:$Vj,43:$VF,49:160,50:$V1,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6,87:$VG,88:100,90:101,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},o($VS,[2,123]),o($VS,[2,124],{27:$VB,28:$VC,112:$VE}),o($VS,[2,126]),o($VS,[2,127]),o($VS,[2,128]),o($VS,[2,129]),o($VS,[2,130]),o($VS,[2,131]),o($VS,[2,132]),o($VS,[2,133]),{30:[1,162],81:[1,163]},o($VT,[2,93]),{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,49:164,87:$VG,88:100,90:101,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},{9:166,22:167,23:168,35:63,37:$V0,38:62,42:$Vj,50:$V1,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6,56:10,57:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,75:165,113:64,114:68},{2:$Vg,9:47,11:169,12:37,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:46,22:48,23:49,24:50,25:65,26:66,27:$Vh,28:$Vi,31:[1,170],35:63,37:$V0,38:62,42:$Vj,50:$V1,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6,56:10,57:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,77:57,80:67,81:$Vr,82:$Vs,83:$Vt,113:64,114:68},{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,49:171,87:$VG,88:100,90:101,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},{36:34,42:$VQ,47:73,48:32},o($V31,$Vy),{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,44:[1,172],46:174,49:135,87:$VG,88:100,90:101,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68,115:173},o($VS,[2,25],{112:$VE}),o($VS,[2,26],{112:$VE}),{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,49:175,87:$VG,88:100,90:101,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},o($Vx,[2,44]),o($V41,[2,38]),{33:[1,177],44:[1,176]},o($V41,[2,40]),o($V51,[2,33]),{36:178,42:$VQ},{35:179,50:$V1,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6},o($Vx,[2,46]),o([10,33,44],[2,48],{84:$VV,85:$VW,86:$VX,89:$VY}),o($V31,[2,49]),o([10,44],[2,41]),o($VR,[2,134]),{44:[1,180],84:$VV,85:$VW,86:$VX,89:$VY},{44:[1,181],84:$VV,85:$VW,86:$VX,89:$VY},{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,49:182,87:$VG,88:100,90:101,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,49:183,87:$VG,88:100,90:101,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,49:184,87:$VG,88:100,90:101,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,49:185,87:$VG,88:100,90:101,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},o($VZ,[2,104]),{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,90:186,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,90:187,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,90:188,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,90:189,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,90:190,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,90:191,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},o($V61,[2,109]),o($V61,[2,110]),o($V61,[2,111]),o($V61,[2,112]),o($V61,[2,113]),o($V61,[2,114]),{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,90:192,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},o($VS,[2,121]),{44:[1,193],84:$VV,85:$VW,86:$VX,89:$VY},{44:[1,194]},{2:$Vg,9:47,11:195,12:37,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:46,22:48,23:49,24:50,25:65,26:66,27:$Vh,28:$Vi,31:[1,196],35:63,37:$V0,38:62,42:$Vj,50:$V1,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6,56:10,57:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,77:57,80:67,81:$Vr,82:$Vs,83:$Vt,113:64,114:68},{43:[1,197]},{44:[1,198],84:$VV,85:$VW,86:$VX,89:$VY},{10:[1,199]},{10:[2,84]},{10:[2,85]},{45:$VD,112:$VE},{2:$Vg,9:47,12:81,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:46,22:48,23:49,24:50,25:65,26:66,27:$Vh,28:$Vi,31:[1,200],35:63,37:$V0,38:62,42:$Vj,50:$V1,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6,56:10,57:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,77:57,80:67,81:$Vr,82:$Vs,83:$Vt,113:64,114:68},{73:[1,201]},{44:[1,202],84:$VV,85:$VW,86:$VX,89:$VY},o($VR,[2,140]),{33:[1,204],44:[1,203]},o($V51,[2,139]),{44:[1,205],84:$VV,85:$VW,86:$VX,89:$VY},o($V41,[2,39]),{34:206,35:132,37:$VU,50:$V1,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6},o($V51,[2,34],{40:$Vz}),{36:207,42:$VQ},{10:[2,99]},{10:[2,100]},o([10,33,44,66,84,85],[2,101],{86:$VX,89:$VY}),o([10,33,44,66,85],[2,102],{84:$VV,86:$VX,89:$VY}),o([10,33,44,66,84,85,86],[2,103],{89:$VY}),{66:[1,208],84:$VV,85:$VW,86:$VX,89:$VY},o($VZ,[2,107],{98:$V_,99:$V$,100:$V01,101:$V11,102:$V21}),o($V71,[2,115],{100:$V01,101:$V11,102:$V21}),o($V71,[2,116],{100:$V01,101:$V11,102:$V21}),o($VS,[2,117]),o($VS,[2,118]),o($VS,[2,119]),{33:[1,209],98:$V_,99:$V$,100:$V01,101:$V11,102:$V21},o($VS,[2,122]),{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,90:210,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},{2:$Vg,9:47,12:81,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:46,22:48,23:49,24:50,25:65,26:66,27:$Vh,28:$Vi,31:[1,211],35:63,37:$V0,38:62,42:$Vj,50:$V1,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6,56:10,57:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,77:57,80:67,81:$Vr,82:$Vs,83:$Vt,113:64,114:68},o($VA,[2,91]),{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,49:212,87:$VG,88:100,90:101,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},{30:[1,213]},{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,49:214,87:$VG,88:100,90:101,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},{73:[1,215]},{43:[1,216]},{30:[1,217]},o($VR,[2,141]),{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,46:218,49:135,87:$VG,88:100,90:101,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},{30:[1,219]},o($V51,[2,32]),o($V51,[2,35],{40:$Vz}),{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,49:220,87:$VG,88:100,90:101,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,90:221,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},o($VS,[2,125]),o($VA,[2,90]),{44:[1,222],84:$VV,85:$VW,86:$VX,89:$VY},{2:$Vg,9:47,11:223,12:37,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:46,22:48,23:49,24:50,25:65,26:66,27:$Vh,28:$Vi,31:[1,224],35:63,37:$V0,38:62,42:$Vj,50:$V1,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6,56:10,57:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,77:57,80:67,81:$Vr,82:$Vs,83:$Vt,113:64,114:68},{10:[1,225],84:$VV,85:$VW,86:$VX,89:$VY},{43:[1,226]},{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,49:227,87:$VG,88:100,90:101,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},{63:228,64:229,65:$V81,67:230,68:$V91},o($V51,[2,138]),{2:$Vg,9:47,11:234,12:37,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:46,22:48,23:49,24:50,25:65,26:66,27:$Vh,28:$Vi,31:[1,233],35:63,37:$V0,38:62,42:$Vj,50:$V1,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6,56:10,57:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,77:57,80:67,81:$Vr,82:$Vs,83:$Vt,113:64,114:68},o($VZ,[2,106]),{44:[1,235],98:$V_,99:$V$,100:$V01,101:$V11,102:$V21},{30:[1,236]},{2:$Vg,9:47,12:81,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:46,22:48,23:49,24:50,25:65,26:66,27:$Vh,28:$Vi,31:[1,237],35:63,37:$V0,38:62,42:$Vj,50:$V1,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6,56:10,57:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,77:57,80:67,81:$Vr,82:$Vs,83:$Vt,113:64,114:68},o($VA,[2,89]),{22:239,23:241,24:240,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,76:238,113:64,114:68},{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,49:242,87:$VG,88:100,90:101,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},{44:[1,243],84:$VV,85:$VW,86:$VX,89:$VY},{31:[1,244],64:245,65:$V81,67:246,68:$V91},{31:[1,247]},o($Va1,[2,72]),{66:[1,248]},{23:106,24:107,25:65,26:66,27:$Vh,28:$Vi,42:$Vj,43:$VF,49:249,87:$VG,88:100,90:101,99:$VH,103:$VI,104:105,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,113:64,114:68},o($VT,[2,95]),{2:$Vg,9:47,12:81,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:46,22:48,23:49,24:50,25:65,26:66,27:$Vh,28:$Vi,31:[1,250],35:63,37:$V0,38:62,42:$Vj,50:$V1,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6,56:10,57:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,77:57,80:67,81:$Vr,82:$Vs,83:$Vt,113:64,114:68},o($VS,[2,120]),{2:$Vg,9:47,11:252,12:37,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:46,22:48,23:49,24:50,25:65,26:66,27:$Vh,28:$Vi,31:[1,251],35:63,37:$V0,38:62,42:$Vj,50:$V1,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6,56:10,57:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,77:57,80:67,81:$Vr,82:$Vs,83:$Vt,113:64,114:68},o($VA,[2,88]),{44:[1,253]},{44:[2,86]},{44:[2,87]},{27:$VB,28:$VC,45:$VD,112:$VE},{44:[1,254],84:$VV,85:$VW,86:$VX,89:$VY},{10:[2,81]},o($VA,[2,65]),{31:[1,255]},o($Va1,[2,71]),o($VA,[2,67]),{30:[1,256],31:[2,68]},{66:[1,257],84:$VV,85:$VW,86:$VX,89:$VY},o($VT,[2,96]),o($VT,[2,97]),{2:$Vg,9:47,12:81,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:46,22:48,23:49,24:50,25:65,26:66,27:$Vh,28:$Vi,31:[1,258],35:63,37:$V0,38:62,42:$Vj,50:$V1,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6,56:10,57:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,77:57,80:67,81:$Vr,82:$Vs,83:$Vt,113:64,114:68},{30:[1,259]},{10:[2,80]},o($VA,[2,66]),{2:$Vg,9:47,11:260,12:37,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:46,22:48,23:49,24:50,25:65,26:66,27:$Vh,28:$Vi,31:[1,261],35:63,37:$V0,38:62,42:$Vj,50:$V1,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6,56:10,57:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,77:57,80:67,81:$Vr,82:$Vs,83:$Vt,113:64,114:68},o($Va1,[2,75],{30:[1,262]}),o($VT,[2,98]),{2:$Vg,9:47,11:264,12:37,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:46,22:48,23:49,24:50,25:65,26:66,27:$Vh,28:$Vi,31:[1,263],35:63,37:$V0,38:62,42:$Vj,50:$V1,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6,56:10,57:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,77:57,80:67,81:$Vr,82:$Vs,83:$Vt,113:64,114:68},{2:$Vg,9:47,12:81,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:46,22:48,23:49,24:50,25:65,26:66,27:$Vh,28:$Vi,31:[1,265],35:63,37:$V0,38:62,42:$Vj,50:$V1,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6,56:10,57:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,77:57,80:67,81:$Vr,82:$Vs,83:$Vt,113:64,114:68},{31:[2,70]},{2:$Vg,9:47,11:266,12:37,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:46,22:48,23:49,24:50,25:65,26:66,27:$Vh,28:$Vi,31:[1,267],35:63,37:$V0,38:62,42:$Vj,50:$V1,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6,56:10,57:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,77:57,80:67,81:$Vr,82:$Vs,83:$Vt,113:64,114:68},o($VA,[2,82]),{2:$Vg,9:47,12:81,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:46,22:48,23:49,24:50,25:65,26:66,27:$Vh,28:$Vi,31:[1,268],35:63,37:$V0,38:62,42:$Vj,50:$V1,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6,56:10,57:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,77:57,80:67,81:$Vr,82:$Vs,83:$Vt,113:64,114:68},{31:[2,69]},{2:$Vg,9:47,12:81,13:38,14:39,15:40,16:41,17:42,18:43,19:44,20:45,21:46,22:48,23:49,24:50,25:65,26:66,27:$Vh,28:$Vi,31:[1,269],35:63,37:$V0,38:62,42:$Vj,50:$V1,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6,56:10,57:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,77:57,80:67,81:$Vr,82:$Vs,83:$Vt,113:64,114:68},o($Va1,[2,74]),o($VA,[2,83]),o($Va1,[2,73])],
defaultActions: {23:[2,1],54:[2,76],55:[2,77],166:[2,84],167:[2,85],180:[2,99],181:[2,100],239:[2,86],240:[2,87],243:[2,81],254:[2,80],261:[2,70],265:[2,69]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

        const error_manager=require("../../mng_error/error_manager.js");
        const vari = require("../../var.js");
        vari.auxError=new error_manager();
        function ErrorSintactico(a,lin,col){
		    //console.log( "Error Sintactico = " + a+"|"+lin+","+col );
            vari.auxError.addError(a,lin,col,vari.archivo,
            "SINTACTICO");
        }

        function ErrorLexico(a,lin,col){
            
            //console.log( "Error Lexico = " + a +"|"+lin+","+col );
            vari.auxError.addError("caracter inesperado: "+a ,lin,col,vari.archivo,
            "LEXICO");
        }
        const o_postInc = require("../compilador/o_postInc.js");
        const o_preInc = require("../compilador/o_preInc.js");
        const o_postDecr = require("../compilador/o_postDecr.js");
        const o_preDecr = require("../compilador/o_preDecr.js");
         
        const oa_suma = require("../compilador/oa_suma.js");
        const oa_multi = require("../compilador/oa_multi.js");
        const oa_resta = require("../compilador/oa_resta.js");
        const oa_division = require("../compilador/oa_division.js");
        const o_valorPuntual= require("../compilador/o_valorPuntual.js");
        const oa_modular = require("../compilador/oa_modular.js");
        const oa_potencia = require("../compilador/oa_potencia.js");
        const oa_negativo = require("../compilador/oa_negativo.js");
        const oa_casteo= require("../compilador/oa_casteo.js");
        const or_relacional = require("../compilador/or_relacional.js");
        const ol_and=require("../compilador/ol_and.js");
        const ol_not=require("../compilador/ol_not.js");
        const ol_or=require("../compilador/ol_or.js");
        const ol_xor=require("../compilador/ol_xor.js");
        const o_ternario=require("../compilador/o_ternario.js");
        const s_print=require("../compilador/s_print.js");
        const s_println=require("../compilador/s_println.js");
        const s_if=require("../compilador/s_if.js");
        const s_bloque=require("../compilador/s_bloque.js");
        const s_while=require("../compilador/s_while.js");
        const s_do_while=require("../compilador/s_do_while.js");
        const s_for=require("../compilador/s_for.js");
        const s_retorno=require("../compilador/s_retorno.js");
        const s_retornoEmpty=require("../compilador/s_retornoEmpty.js");
        const s_break=require("../compilador/s_break.js");
        const s_continue=require("../compilador/s_continue.js");
        const s_switch=require("../compilador/s_switch.js");
        const s_decla=require("../compilador/s_decla.js");
        const s_declaracion=require("../compilador/s_declaracion.js");
        const s_asignacion=require("../compilador/s_asignacion.js");
        const s_accesos=require("../compilador/s_accesos.js");
        const s_acVariable=require("../compilador/s_acVariable.js");
        const caso=require("../compilador/caso.js");
        const parametro=require("../../mng_ts/parametro.js");
        const s_metodo=require("../compilador/s_metodo.js");
        const s_llamada=require("../compilador/s_llamada.js");
        //const s_salida=require("../compilador/s_salida.js");
        const tablaTipos = require("../tablaTipos.js");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore comment */
break;
case 1:/* ignore comment */
break;
case 2:return 93;
break;
case 3:return 92;
break;
case 4:return 97;
break;
case 5:return 96;
break;
case 6:return 94;
break;
case 7:return 45;
break;
case 8:return 95;
break;
case 9:return 10;
break;
case 10:return 66;
break;
case 11:return 89;
break;
case 12:return 27;
break;
case 13:return 28;
break;
case 14:return 98;
break;
case 15:return 99;
break;
case 16:return 100;
break;
case 17:return 101;
break;
case 18:return 102;
break;
case 19:return 43;
break;
case 20:return 44;
break;
case 21:return 30;
break;
case 22:return 31;
break;
case 23:return 40;
break;
case 24:return 41;
break;
case 25:return 33;
break;
case 26:return 112;
break;
case 27:return 103;
break;
case 28:return 86;
break;
case 29:return 84;
break;
case 30:return 85;
break;
case 31:return 87;
break;
case 32:return 109;
break;
case 33:return 81;
break;
case 34:return "else_";
break;
case 35:return 110;
break;
case 36:return 82;
break;
case 37:return 83;
break;
case 38:return 73;
break;
case 39:return 69;
break;
case 40:return 70;
break;
case 41:return 71;
break;
case 42:return 62;
break;
case 43:return 68;
break;
case 44:return 65;
break;
case 45:return 72;
break;
case 46:return 50;
break;
case 47:return 52;
break;
case 48:return 51;
break;
case 49:return 53;
break;
case 50:return 54;
break;
case 51:return 55;
break;
case 52:return 111;
break;
case 53:return 74;
break;
case 54:return 58;
break;
case 55:return 57;
break;
case 56:return 59;
break;
case 57:return 60;
break;
case 58:return 37;
break;
case 59:return 61;
break;
case 60:return 108;
break;
case 61:return 107;
break;
case 62:return 105;
break;
case 63:return 106;
break;
case 64:return 42;
break;
case 65: /* skip whitespace */
break;
case 66:
break;
case 67:
break;
case 68:
break;
case 69:
break;
case 70:return 5;
break;
case 71:ErrorLexico(yy_.yytext,yy_.yylineno,yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:(\/\*[^*]*\*\/))/,/^(?:(\/\/[^\n]+[\n]?))/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:;)/,/^(?::)/,/^(?:\?)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\.)/,/^(?:pow\b)/,/^(?:\^)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:true\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:false\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:do\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:String\b)/,/^(?:void\b)/,/^(?:null\b)/,/^(?:for\b)/,/^(?:public\b)/,/^(?:protected\b)/,/^(?:private\b)/,/^(?:static\b)/,/^(?:final\b)/,/^(?:abstract\b)/,/^(?:(([0-9]+)[.]([0-9]+)?))/,/^(?:([0-9]+))/,/^(?:([\"]([^\"])*[\"]))/,/^(?:([\']([a-zA-Z]|\\0|\\n|\\t|\\r|\\f)[\']))/,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/,/^(?:\s+)/,/^(?:\n+)/,/^(?:\r+)/,/^(?:\t+)/,/^(?:\f+)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}