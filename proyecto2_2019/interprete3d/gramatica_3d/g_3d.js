/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var g_3d = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,13],$V2=[1,14],$V3=[1,17],$V4=[1,25],$V5=[1,24],$V6=[1,23],$V7=[1,21],$V8=[1,20],$V9=[1,22],$Va=[1,18],$Vb=[1,19],$Vc=[1,16],$Vd=[2,5,17,18,19,23,26,31,32,34,35,45,49,50],$Ve=[1,56],$Vf=[1,53],$Vg=[1,52],$Vh=[1,55],$Vi=[1,57],$Vj=[1,58],$Vk=[9,21,25,36,37,38,39,40,41,47,51,52,53,54,55],$Vl=[1,82],$Vm=[1,83],$Vn=[1,84],$Vo=[1,85],$Vp=[1,86],$Vq=[1,87],$Vr=[19,56,57];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"INICIO":3,"S":4,"ENDOFFILE":5,"L":6,"SENT":7,"DECLARACION":8,"ptocoma":9,"ASIGNACION":10,"ETI":11,"SALTO":12,"IF":13,"LLAMADA":14,"IMPRIMIR":15,"CLEAN":16,"llavc":17,"void_":18,"er_id":19,"para":20,"parc":21,"llava":22,"limpiar":23,"OPC":24,"coma":25,"print_":26,"OI":27,"pc_":28,"pd_":29,"pe_":30,"call_":31,"if_":32,"OPREL":33,"goto_":34,"ifFalse_":35,"menor":36,"mayor":37,"menori":38,"mayori":39,"igual":40,"dif":41,"dosptos":42,"is":43,"VALUE":44,"stack_":45,"cora":46,"corc":47,"VALOR":48,"heap_":49,"var_":50,"mas":51,"menos":52,"por":53,"divis":54,"modu":55,"er_entero":56,"er_decimal":57,"$accept":0,"$end":1},
terminals_: {2:"error",5:"ENDOFFILE",9:"ptocoma",17:"llavc",18:"void_",19:"er_id",20:"para",21:"parc",22:"llava",23:"limpiar",25:"coma",26:"print_",28:"pc_",29:"pd_",30:"pe_",31:"call_",32:"if_",34:"goto_",35:"ifFalse_",36:"menor",37:"mayor",38:"menori",39:"mayori",40:"igual",41:"dif",42:"dosptos",43:"is",45:"stack_",46:"cora",47:"corc",49:"heap_",50:"var_",51:"mas",52:"menos",53:"por",54:"divis",55:"modu",56:"er_entero",57:"er_decimal"},
productions_: [0,[3,2],[4,1],[6,2],[6,1],[7,2],[7,2],[7,1],[7,2],[7,2],[7,2],[7,2],[7,2],[7,1],[7,5],[7,2],[16,6],[15,6],[27,1],[27,1],[27,1],[14,4],[13,8],[13,8],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[12,2],[11,2],[10,3],[10,6],[10,6],[8,4],[44,1],[44,4],[44,4],[48,3],[48,3],[48,3],[48,3],[48,3],[48,2],[48,1],[24,1],[24,1],[24,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

					//typeof console !== 'undefined' ? console.log($$[$0-1]) : print($$[$0-1]);
					console.log("aceptada");
					return $$[$0-1];
				
break;
case 2:

                    this.$=new raiz($$[$0]);
                
break;
case 3:

                    this.$=$$[$0-1];
                    if($$[$0]!=null)
                    {this.$.push($$[$0]);}
                
break;
case 4:

                    this.$=new Array();
                    if($$[$0]!=null)
                    {this.$.push($$[$0]);}
                
break;
case 5: case 6: case 8: case 9: case 10: case 11: case 12:

                    this.$=$$[$0-1];
                
break;
case 7: case 36: case 45:

                    this.$=$$[$0];
                
break;
case 13:

                     correlativo++;
                     this.$=new s_salida(_$[1].first_line,_$[1].first_column,vari.archivo,correlativo);
                
break;
case 14:

                    correlativo++;
                    this.$=new metodo($$[$0-3],_$[1].first_line,_$[1].first_column,vari.archivo,correlativo);
                
break;
case 15:

					 ErrorSintactico("falta un punto y coma ",yylineno,0);
                     this.$=null;									
				
break;
case 16:

                    correlativo++;
                    this.$=new s_clean($$[$0-3],$$[$0-1],_$[1].first_line,_$[1].first_column,vari.archivo,correlativo);
                
break;
case 17:

                    correlativo++;
                    this.$=new s_print($$[$0-3],$$[$0-1],_$[1].first_line,_$[1].first_column,vari.archivo,correlativo);
                
break;
case 18:

                    this.$="c";
                
break;
case 19:

                    this.$="d";
                
break;
case 20:

                    this.$="e";
                
break;
case 21:

                    correlativo++;
                    this.$=new s_llamada($$[$0-2],_$[1].first_line,_$[1].first_column,vari.archivo,correlativo);
                
break;
case 22:

                    correlativo++;
                    this.$=new s_if($$[$0-4],$$[$0-5],$$[$0-3],$$[$0],_$[1].first_line,_$[1].first_column,vari.archivo,correlativo);
                
break;
case 23:

                    correlativo++;
                    this.$=new s_iffalse($$[$0-4],$$[$0-5],$$[$0-3],$$[$0],_$[1].first_line,_$[1].first_column,vari.archivo,correlativo);
                
break;
case 24:

                    this.$="<";
                
break;
case 25:

                    this.$=">";
                
break;
case 26:

                    this.$="<=";
                
break;
case 27:

                    this.$=">=";
                
break;
case 28:

                    this.$="==";
                
break;
case 29:

                    this.$="!=";
                
break;
case 30:

                    correlativo++;
                    this.$=new s_salto($$[$0],_$[1].first_line,_$[1].first_column,vari.archivo,correlativo);
                
break;
case 31:

                    correlativo++;
                    this.$=new s_etiqueta($$[$0-1],_$[1].first_line,_$[1].first_column,vari.archivo,correlativo);
                
break;
case 32:

                    correlativo++;
                    this.$=new s_asignacion($$[$0-2],$$[$0],_$[1].first_line,_$[1].first_column,vari.archivo,correlativo);
                
break;
case 33:

                    correlativo++;
                    this.$=new s_asignaStack($$[$0-3],$$[$0],_$[1].first_line,_$[1].first_column,vari.archivo,correlativo);
                
break;
case 34:

                    correlativo++;
                    this.$=new s_asignaHeap($$[$0-3],$$[$0],_$[1].first_line,_$[1].first_column,vari.archivo,correlativo);
                
break;
case 35:

                    correlativo++;
                    this.$=new s_declaracion($$[$0-2],$$[$0],_$[1].first_line,_$[1].first_column,vari.archivo,correlativo);
                
break;
case 37:

                    this.$=new v_accesoHeap($$[$0-1],_$[1].first_line,_$[1].first_column,vari.archivo);
                
break;
case 38:

                    this.$=new v_accesoStack($$[$0-1],_$[1].first_line,_$[1].first_column,vari.archivo);
                
break;
case 39:

                    this.$=new v_suma($$[$0-2],$$[$0],_$[2].first_line,_$[2].first_column,vari.archivo);
                
break;
case 40:

                    this.$=new v_resta($$[$0-2],$$[$0],_$[2].first_line,_$[2].first_column,vari.archivo);
                
break;
case 41:

                    this.$=new v_multiplicacion($$[$0-2],$$[$0],_$[2].first_line,_$[2].first_column,vari.archivo);
                
break;
case 42:

                    this.$=new v_division($$[$0-2],$$[$0],_$[2].first_line,_$[2].first_column,vari.archivo);
                
break;
case 43:

                    this.$=new v_modular($$[$0-2],$$[$0],_$[2].first_line,_$[2].first_column,vari.archivo);
                
break;
case 44:

                    this.$=new v_negativo($$[$0],_$[1].first_line,_$[1].first_column,vari.archivo);
                
break;
case 46:

                    this.$=new v_id($$[$0],_$[1].first_line,_$[1].first_column,vari.archivo);
                
break;
case 47: case 48:

                    this.$=new v_numerico($$[$0],_$[1].first_line,_$[1].first_column,vari.archivo);
                
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,23:$V4,26:$V5,31:$V6,32:$V7,34:$V8,35:$V9,45:$Va,49:$Vb,50:$Vc},{1:[3]},{5:[1,26]},{2:$V0,5:[2,2],7:27,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,23:$V4,26:$V5,31:$V6,32:$V7,34:$V8,35:$V9,45:$Va,49:$Vb,50:$Vc},o($Vd,[2,4]),{9:[1,28]},{9:[1,29]},o($Vd,[2,7]),{9:[1,30]},{9:[1,31]},{9:[1,32]},{9:[1,33]},{9:[1,34]},o($Vd,[2,13]),{19:[1,35]},{9:[1,36]},{19:[1,37]},{42:[1,39],43:[1,38]},{46:[1,40]},{46:[1,41]},{19:[1,42]},{20:[1,43]},{20:[1,44]},{19:[1,45]},{20:[1,46]},{20:[1,47]},{1:[2,1]},o($Vd,[2,3]),o($Vd,[2,5]),o($Vd,[2,6]),o($Vd,[2,8]),o($Vd,[2,9]),o($Vd,[2,10]),o($Vd,[2,11]),o($Vd,[2,12]),{20:[1,48]},o($Vd,[2,15]),{43:[1,49]},{19:$Ve,24:54,44:50,45:$Vf,48:51,49:$Vg,52:$Vh,56:$Vi,57:$Vj},o($Vd,[2,31]),{19:$Ve,24:59,56:$Vi,57:$Vj},{19:$Ve,24:60,56:$Vi,57:$Vj},{9:[2,30]},{19:$Ve,24:61,56:$Vi,57:$Vj},{19:$Ve,24:62,56:$Vi,57:$Vj},{20:[1,63]},{27:64,28:[1,65],29:[1,66],30:[1,67]},{19:$Ve,24:68,56:$Vi,57:$Vj},{21:[1,69]},{19:$Ve,24:54,44:70,45:$Vf,48:51,49:$Vg,52:$Vh,56:$Vi,57:$Vj},{9:[2,32]},{9:[2,36]},{46:[1,71]},{46:[1,72]},{9:[2,45],51:[1,73],52:[1,74],53:[1,75],54:[1,76],55:[1,77]},{19:$Ve,24:78,56:$Vi,57:$Vj},o($Vk,[2,46]),o($Vk,[2,47]),o($Vk,[2,48]),{47:[1,79]},{47:[1,80]},{33:81,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq},{33:88,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq},{21:[1,89]},{25:[1,90]},{25:[2,18]},{25:[2,19]},{25:[2,20]},{25:[1,91]},{22:[1,92]},{9:[2,35]},{19:$Ve,24:93,56:$Vi,57:$Vj},{19:$Ve,24:94,56:$Vi,57:$Vj},{19:$Ve,24:95,56:$Vi,57:$Vj},{19:$Ve,24:96,56:$Vi,57:$Vj},{19:$Ve,24:97,56:$Vi,57:$Vj},{19:$Ve,24:98,56:$Vi,57:$Vj},{19:$Ve,24:99,56:$Vi,57:$Vj},{9:[2,44]},{43:[1,100]},{43:[1,101]},{19:$Ve,24:102,56:$Vi,57:$Vj},o($Vr,[2,24]),o($Vr,[2,25]),o($Vr,[2,26]),o($Vr,[2,27]),o($Vr,[2,28]),o($Vr,[2,29]),{19:$Ve,24:103,56:$Vi,57:$Vj},{9:[2,21]},{19:$Ve,24:104,56:$Vi,57:$Vj},{19:$Ve,24:105,56:$Vi,57:$Vj},o($Vd,[2,14]),{47:[1,106]},{47:[1,107]},{9:[2,39]},{9:[2,40]},{9:[2,41]},{9:[2,42]},{9:[2,43]},{19:$Ve,24:54,48:108,52:$Vh,56:$Vi,57:$Vj},{19:$Ve,24:54,48:109,52:$Vh,56:$Vi,57:$Vj},{21:[1,110]},{21:[1,111]},{21:[1,112]},{21:[1,113]},{9:[2,37]},{9:[2,38]},{9:[2,33]},{9:[2,34]},{34:[1,114]},{34:[1,115]},{9:[2,17]},{9:[2,16]},{19:[1,116]},{19:[1,117]},{9:[2,22]},{9:[2,23]}],
defaultActions: {26:[2,1],42:[2,30],50:[2,32],51:[2,36],65:[2,18],66:[2,19],67:[2,20],70:[2,35],78:[2,44],89:[2,21],95:[2,39],96:[2,40],97:[2,41],98:[2,42],99:[2,43],106:[2,37],107:[2,38],108:[2,33],109:[2,34],112:[2,17],113:[2,16],116:[2,22],117:[2,23]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

        const error_manager=require("../../mng_error/error_manager.js");
        const vari = require("../../var.js");
        vari.auxError=new error_manager();
        function ErrorSintactico(a,lin,col){
		    //console.log( "Error Sintactico = " + a+"|"+lin+","+col );
            vari.auxError.addError(a,lin,col,vari.archivo,
            "SINTACTICO");
        }

        function ErrorLexico(a,lin,col){
            
            //console.log( "Error Lexico = " + a +"|"+lin+","+col );
            vari.auxError.addError("caracter inesperado: "+a ,lin,col,vari.archivo,
            "LEXICO");
        }
        var correlativo=-1;
        const metodo = require("../codigo/metodo.js");
        const s_asignacion = require("../codigo/s_asignacion.js");
        const s_asignaHeap = require("../codigo/s_asignaHeap.js");
        const s_asignaStack = require("../codigo/s_asignaStack.js");
        const s_clean = require("../codigo/s_clean.js");
        const s_declaracion = require("../codigo/s_declaracion.js");
        const s_etiqueta = require("../codigo/s_etiqueta.js");
        const s_if = require("../codigo/s_if.js");
        const s_iffalse = require("../codigo/s_iffalse.js");
        const s_llamada = require("../codigo/s_llamada.js");
        const s_print = require("../codigo/s_print.js");
        const s_salto = require("../codigo/s_salto.js");
        const s_salida=require("../codigo/s_salida.js");
        const v_accesoHeap = require("../codigo/v_accesoHeap.js");
        const v_accesoStack = require("../codigo/v_accesoStack.js");
        const v_division = require("../codigo/v_division.js");
        const v_id= require("../codigo/v_id.js");
        const v_modular = require("../codigo/v_modular.js");
        const v_multiplicacion = require("../codigo/v_multiplicacion.js");
        const v_negativo = require("../codigo/v_negativo.js");
        const v_numerico = require("../codigo/v_numerico.js");
        const v_resta = require("../codigo/v_resta.js");
        const v_suma = require("../codigo/v_suma.js"); 
        const raiz=  require("../codigo/raiz.js");     
        
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore comment */
break;
case 1:/* ignore comment */
break;
case 2:return 50;
break;
case 3:return 34;
break;
case 4:return 45;
break;
case 5:return 32;
break;
case 6:return 49;
break;
case 7:return 31;
break;
case 8:return 26;
break;
case 9:return 35;
break;
case 10:return 18;
break;
case 11:return 40;
break;
case 12:return 51;
break;
case 13:return 52;
break;
case 14:return 53;
break;
case 15:return 54;
break;
case 16:return 55;
break;
case 17:return 9;
break;
case 18:return 25;
break;
case 19:return 43;
break;
case 20:return 41;
break;
case 21:return 39;
break;
case 22:return 37;
break;
case 23:return 38;
break;
case 24:return 36;
break;
case 25:return 46;
break;
case 26:return 47;
break;
case 27:return 20;
break;
case 28:return 21;
break;
case 29:return 42;
break;
case 30:return 22;
break;
case 31:return 17;
break;
case 32:return 28;
break;
case 33:return 30;
break;
case 34:return 29;
break;
case 35:return 23;
break;
case 36:return 57;
break;
case 37:return 56;
break;
case 38:return 19;
break;
case 39:/* skip whitespace */
break;
case 40:
break;
case 41:
break;
case 42:
break;
case 43:
break;
case 44:return 5;
break;
case 45:ErrorLexico(yy_.yytext,yy_.yylineno,yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:(\/\*[^*]*\*\/))/i,/^(?:(\/\/[^\n']+[\n]?))/i,/^(?:var\b)/i,/^(?:goto\b)/i,/^(?:stack\b)/i,/^(?:if\b)/i,/^(?:heap\b)/i,/^(?:call\b)/i,/^(?:print\b)/i,/^(?:ifFalse\b)/i,/^(?:void\b)/i,/^(?:==)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:;)/i,/^(?:,)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:"%c")/i,/^(?:"%e")/i,/^(?:"%d")/i,/^(?:\$\$_clean_scope\b)/i,/^(?:(([0-9]+)[.]([0-9]+)?))/i,/^(?:([0-9]+))/i,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/i,/^(?:\s+)/i,/^(?:\n+)/i,/^(?:\r+)/i,/^(?:\t+)/i,/^(?:\f+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = g_3d;
exports.Parser = g_3d.Parser;
exports.parse = function () { return g_3d.parse.apply(g_3d, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}